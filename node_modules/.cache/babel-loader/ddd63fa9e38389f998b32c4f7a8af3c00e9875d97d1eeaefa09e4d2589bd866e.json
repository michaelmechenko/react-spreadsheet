{"ast":null,"code":"import _slicedToArray from\"C:/Users/micha/Documents/mechenko_main/PEDAGOGY/fa23/CS4530/project/team111-project/implementation/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState}from\"react\";import\"./globals.css\";import Header from\"./components/layout/Header\";import SelectedCellBox from\"./components/SelectedCellBox.component\";import InputBox from\"./components/InputBox.component\";import SpreadSheetPage from\"./components/SpreadsheetPage.component\";import{SpreadSheetPageModel}from\"./model/domain/spreadsheet-page.model\";/*\nTODO\n\n- add buttons; pages, import, export\n- update setvalue handler function to properly update value based on model\n- tidy up code\n\n*/ /*\nCHANGES MADE BECAUSE I SCREWED UP THE MR\n- changed how cell reference is computed\n- added row/col attribute to cell and page\n*/import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";export default function SpreadsheetMain(){var pageModel=new SpreadSheetPageModel(\"\",17);// have data model as usestate? in spreadsheetpage component\n// useeffect updates it any time data has changed\nvar _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),inputDisplay=_useState2[0],setInputDisplay=_useState2[1];// move to page itself\nvar _useState3=useState(pageModel.getSelectedCell()),_useState4=_slicedToArray(_useState3,2),selectedPageCell=_useState4[0],setSelectedPageCell=_useState4[1];var updateSelectedCell=function updateSelectedCell(reference){pageModel.setSelectedCell(pageModel.getCellFromReference(reference));setSelectedPageCell(pageModel.getSelectedCell());};var handleInputEnter=function handleInputEnter(input){updateCellValue(input);setInputDisplay(selectedPageCell.getReference());};//  *** NEED TO FIX CELL'S DISPLAY UPDATING\n// usestate celldisplay in cell component, setter function in parent and passed to state\n// also maybe useeffect\nvar updateCellValue=function updateCellValue(input){selectedPageCell.setBuffer(input);};return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsxs(\"div\",{className:\"main-container\",children:[/*#__PURE__*/_jsx(Header,{}),/*#__PURE__*/_jsx(\"div\",{className:\"flex justify-center\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"flex flex-col pt-5\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"flex flex-row w-full\",children:[/*#__PURE__*/_jsx(SelectedCellBox,{display:selectedPageCell.getReference()}),/*#__PURE__*/_jsx(InputBox,{inputEnter:handleInputEnter,displayValue:inputDisplay,setInputDisplay:setInputDisplay})]}),/*#__PURE__*/_jsx(SpreadSheetPage,{pageModel:pageModel,handleCellClick:updateSelectedCell,selectedCell:selectedPageCell,setCellValue:updateCellValue})]})})]})});}","map":{"version":3,"names":["React","useState","Header","SelectedCellBox","InputBox","SpreadSheetPage","SpreadSheetPageModel","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","SpreadsheetMain","pageModel","_useState","_useState2","_slicedToArray","inputDisplay","setInputDisplay","_useState3","getSelectedCell","_useState4","selectedPageCell","setSelectedPageCell","updateSelectedCell","reference","setSelectedCell","getCellFromReference","handleInputEnter","input","updateCellValue","getReference","setBuffer","children","className","display","inputEnter","displayValue","handleCellClick","selectedCell","setCellValue"],"sources":["C:/Users/micha/Documents/mechenko_main/PEDAGOGY/fa23/CS4530/project/team111-project/implementation/src/SpreadsheetMain.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport \"./globals.css\";\nimport Header from \"./components/layout/Header\";\nimport SelectedCellBox from \"./components/SelectedCellBox.component\";\nimport InputBox from \"./components/InputBox.component\";\nimport SpreadSheetPage from \"./components/SpreadsheetPage.component\";\nimport { SpreadSheetPageModel } from \"./model/domain/spreadsheet-page.model\";\n\n/*\nTODO\n\n- add buttons; pages, import, export\n- update setvalue handler function to properly update value based on model\n- tidy up code\n\n*/\n\n/*\nCHANGES MADE BECAUSE I SCREWED UP THE MR\n- changed how cell reference is computed\n- added row/col attribute to cell and page\n*/\n\nexport default function SpreadsheetMain() {\n  const pageModel: SpreadSheetPageModel = new SpreadSheetPageModel(\"\", 17);\n  // have data model as usestate? in spreadsheetpage component\n  // useeffect updates it any time data has changed\n\n  const [inputDisplay, setInputDisplay] = useState(\"\");\n\n  // move to page itself\n  const [selectedPageCell, setSelectedPageCell] = useState(\n    pageModel.getSelectedCell()\n  );\n\n  const updateSelectedCell = (reference: string) => {\n    pageModel.setSelectedCell(pageModel.getCellFromReference(reference));\n    setSelectedPageCell(pageModel.getSelectedCell());\n  };\n\n  const handleInputEnter = (input: string) => {\n    updateCellValue(input);\n    setInputDisplay(selectedPageCell.getReference());\n  };\n\n  //  *** NEED TO FIX CELL'S DISPLAY UPDATING\n  // usestate celldisplay in cell component, setter function in parent and passed to state\n  // also maybe useeffect\n  const updateCellValue = (input: string) => {\n    selectedPageCell.setBuffer(input);\n  };\n\n  return (\n    <>\n      <div className=\"main-container\">\n        <Header></Header>\n        <div className=\"flex justify-center\">\n          <div className=\"flex flex-col pt-5\">\n            <div className=\"flex flex-row w-full\">\n              <SelectedCellBox display={selectedPageCell.getReference()} />\n              <InputBox\n                inputEnter={handleInputEnter}\n                displayValue={inputDisplay}\n                setInputDisplay={setInputDisplay}\n              />\n            </div>\n            <SpreadSheetPage\n              pageModel={pageModel}\n              handleCellClick={updateSelectedCell}\n              selectedCell={selectedPageCell}\n              setCellValue={updateCellValue}\n            />\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n"],"mappings":"wLAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,MAAO,eAAe,CACtB,MAAO,CAAAC,MAAM,KAAM,4BAA4B,CAC/C,MAAO,CAAAC,eAAe,KAAM,wCAAwC,CACpE,MAAO,CAAAC,QAAQ,KAAM,iCAAiC,CACtD,MAAO,CAAAC,eAAe,KAAM,wCAAwC,CACpE,OAASC,oBAAoB,KAAQ,uCAAuC,CAE5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAPA,CASA;AACA;AACA;AACA;AACA,EAJA,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,gCAAAC,QAAA,IAAAC,SAAA,yBAMA,cAAe,SAAS,CAAAC,eAAeA,CAAA,CAAG,CACxC,GAAM,CAAAC,SAA+B,CAAG,GAAI,CAAAR,oBAAoB,CAAC,EAAE,CAAE,EAAE,CAAC,CACxE;AACA;AAEA,IAAAS,SAAA,CAAwCd,QAAQ,CAAC,EAAE,CAAC,CAAAe,UAAA,CAAAC,cAAA,CAAAF,SAAA,IAA7CG,YAAY,CAAAF,UAAA,IAAEG,eAAe,CAAAH,UAAA,IAEpC;AACA,IAAAI,UAAA,CAAgDnB,QAAQ,CACtDa,SAAS,CAACO,eAAe,CAAC,CAC5B,CAAC,CAAAC,UAAA,CAAAL,cAAA,CAAAG,UAAA,IAFMG,gBAAgB,CAAAD,UAAA,IAAEE,mBAAmB,CAAAF,UAAA,IAI5C,GAAM,CAAAG,kBAAkB,CAAG,QAArB,CAAAA,kBAAkBA,CAAIC,SAAiB,CAAK,CAChDZ,SAAS,CAACa,eAAe,CAACb,SAAS,CAACc,oBAAoB,CAACF,SAAS,CAAC,CAAC,CACpEF,mBAAmB,CAACV,SAAS,CAACO,eAAe,CAAC,CAAC,CAAC,CAClD,CAAC,CAED,GAAM,CAAAQ,gBAAgB,CAAG,QAAnB,CAAAA,gBAAgBA,CAAIC,KAAa,CAAK,CAC1CC,eAAe,CAACD,KAAK,CAAC,CACtBX,eAAe,CAACI,gBAAgB,CAACS,YAAY,CAAC,CAAC,CAAC,CAClD,CAAC,CAED;AACA;AACA;AACA,GAAM,CAAAD,eAAe,CAAG,QAAlB,CAAAA,eAAeA,CAAID,KAAa,CAAK,CACzCP,gBAAgB,CAACU,SAAS,CAACH,KAAK,CAAC,CACnC,CAAC,CAED,mBACEtB,IAAA,CAAAI,SAAA,EAAAsB,QAAA,cACExB,KAAA,QAAKyB,SAAS,CAAC,gBAAgB,CAAAD,QAAA,eAC7B1B,IAAA,CAACN,MAAM,GAAS,CAAC,cACjBM,IAAA,QAAK2B,SAAS,CAAC,qBAAqB,CAAAD,QAAA,cAClCxB,KAAA,QAAKyB,SAAS,CAAC,oBAAoB,CAAAD,QAAA,eACjCxB,KAAA,QAAKyB,SAAS,CAAC,sBAAsB,CAAAD,QAAA,eACnC1B,IAAA,CAACL,eAAe,EAACiC,OAAO,CAAEb,gBAAgB,CAACS,YAAY,CAAC,CAAE,CAAE,CAAC,cAC7DxB,IAAA,CAACJ,QAAQ,EACPiC,UAAU,CAAER,gBAAiB,CAC7BS,YAAY,CAAEpB,YAAa,CAC3BC,eAAe,CAAEA,eAAgB,CAClC,CAAC,EACC,CAAC,cACNX,IAAA,CAACH,eAAe,EACdS,SAAS,CAAEA,SAAU,CACrByB,eAAe,CAAEd,kBAAmB,CACpCe,YAAY,CAAEjB,gBAAiB,CAC/BkB,YAAY,CAAEV,eAAgB,CAC/B,CAAC,EACC,CAAC,CACH,CAAC,EACH,CAAC,CACN,CAAC,CAEP"},"metadata":{},"sourceType":"module","externalDependencies":[]}