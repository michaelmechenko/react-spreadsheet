{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { createQuantileSeq } from '../../function/statistics/quantileSeq.js';\nimport { lastDimToZeroBase } from './utils/lastDimToZeroBase.js';\nvar name = 'quantileSeq';\nvar dependencies = ['typed', 'bignumber', 'add', 'subtract', 'divide', 'multiply', 'partitionSelect', 'compare', 'isInteger', 'smaller', 'smallerEq', 'larger'];\n\n/**\n * Attach a transform function to math.quantileSeq\n * Adds a property transform containing the transform function.\n *\n * This transform changed the `dim` parameter of function std\n * from one-based to zero based\n */\nexport var createQuantileSeqTransform = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    bignumber = _ref.bignumber,\n    add = _ref.add,\n    subtract = _ref.subtract,\n    divide = _ref.divide,\n    multiply = _ref.multiply,\n    partitionSelect = _ref.partitionSelect,\n    compare = _ref.compare,\n    isInteger = _ref.isInteger,\n    smaller = _ref.smaller,\n    smallerEq = _ref.smallerEq,\n    larger = _ref.larger;\n  var quantileSeq = createQuantileSeq({\n    typed: typed,\n    bignumber: bignumber,\n    add: add,\n    subtract: subtract,\n    divide: divide,\n    multiply: multiply,\n    partitionSelect: partitionSelect,\n    compare: compare,\n    isInteger: isInteger,\n    smaller: smaller,\n    smallerEq: smallerEq,\n    larger: larger\n  });\n  return typed('quantileSeq', {\n    'Array | Matrix, number | BigNumber': quantileSeq,\n    'Array | Matrix, number | BigNumber, number': function ArrayMatrixNumberBigNumberNumber(arr, prob, dim) {\n      return quantileSeq(arr, prob, dimToZeroBase(dim));\n    },\n    'Array | Matrix, number | BigNumber, boolean': quantileSeq,\n    'Array | Matrix, number | BigNumber, boolean, number': function ArrayMatrixNumberBigNumberBooleanNumber(arr, prob, sorted, dim) {\n      return quantileSeq(arr, prob, sorted, dimToZeroBase(dim));\n    },\n    'Array | Matrix, Array | Matrix': quantileSeq,\n    'Array | Matrix, Array | Matrix, number': function ArrayMatrixArrayMatrixNumber(data, prob, dim) {\n      return quantileSeq(data, prob, dimToZeroBase(dim));\n    },\n    'Array | Matrix, Array | Matrix, boolean': quantileSeq,\n    'Array | Matrix, Array | Matrix, boolean, number': function ArrayMatrixArrayMatrixBooleanNumber(data, prob, sorted, dim) {\n      return quantileSeq(data, prob, sorted, dimToZeroBase(dim));\n    }\n  });\n  function dimToZeroBase(dim) {\n    // TODO: find a better way, maybe lastDimToZeroBase could apply to more cases.\n    return lastDimToZeroBase([[], dim])[1];\n  }\n}, {\n  isTransformFunction: true\n});","map":{"version":3,"names":["factory","createQuantileSeq","lastDimToZeroBase","name","dependencies","createQuantileSeqTransform","_ref","typed","bignumber","add","subtract","divide","multiply","partitionSelect","compare","isInteger","smaller","smallerEq","larger","quantileSeq","ArrayMatrixNumberBigNumberNumber","arr","prob","dim","dimToZeroBase","ArrayMatrixNumberBigNumberBooleanNumber","sorted","ArrayMatrixArrayMatrixNumber","data","ArrayMatrixArrayMatrixBooleanNumber","isTransformFunction"],"sources":["C:/Users/micha/Documents/mechenko_main/PEDAGOGY/fa23/CS4530/project/team111-project/implementation/node_modules/mathjs/lib/esm/expression/transform/quantileSeq.transform.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { createQuantileSeq } from '../../function/statistics/quantileSeq.js';\nimport { lastDimToZeroBase } from './utils/lastDimToZeroBase.js';\nvar name = 'quantileSeq';\nvar dependencies = ['typed', 'bignumber', 'add', 'subtract', 'divide', 'multiply', 'partitionSelect', 'compare', 'isInteger', 'smaller', 'smallerEq', 'larger'];\n\n/**\n * Attach a transform function to math.quantileSeq\n * Adds a property transform containing the transform function.\n *\n * This transform changed the `dim` parameter of function std\n * from one-based to zero based\n */\nexport var createQuantileSeqTransform = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    bignumber,\n    add,\n    subtract,\n    divide,\n    multiply,\n    partitionSelect,\n    compare,\n    isInteger,\n    smaller,\n    smallerEq,\n    larger\n  } = _ref;\n  var quantileSeq = createQuantileSeq({\n    typed,\n    bignumber,\n    add,\n    subtract,\n    divide,\n    multiply,\n    partitionSelect,\n    compare,\n    isInteger,\n    smaller,\n    smallerEq,\n    larger\n  });\n  return typed('quantileSeq', {\n    'Array | Matrix, number | BigNumber': quantileSeq,\n    'Array | Matrix, number | BigNumber, number': (arr, prob, dim) => quantileSeq(arr, prob, dimToZeroBase(dim)),\n    'Array | Matrix, number | BigNumber, boolean': quantileSeq,\n    'Array | Matrix, number | BigNumber, boolean, number': (arr, prob, sorted, dim) => quantileSeq(arr, prob, sorted, dimToZeroBase(dim)),\n    'Array | Matrix, Array | Matrix': quantileSeq,\n    'Array | Matrix, Array | Matrix, number': (data, prob, dim) => quantileSeq(data, prob, dimToZeroBase(dim)),\n    'Array | Matrix, Array | Matrix, boolean': quantileSeq,\n    'Array | Matrix, Array | Matrix, boolean, number': (data, prob, sorted, dim) => quantileSeq(data, prob, sorted, dimToZeroBase(dim))\n  });\n  function dimToZeroBase(dim) {\n    // TODO: find a better way, maybe lastDimToZeroBase could apply to more cases.\n    return lastDimToZeroBase([[], dim])[1];\n  }\n}, {\n  isTransformFunction: true\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,wBAAwB;AAChD,SAASC,iBAAiB,QAAQ,0CAA0C;AAC5E,SAASC,iBAAiB,QAAQ,8BAA8B;AAChE,IAAIC,IAAI,GAAG,aAAa;AACxB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,WAAW,EAAE,KAAK,EAAE,UAAU,EAAE,QAAQ,EAAE,UAAU,EAAE,iBAAiB,EAAE,SAAS,EAAE,WAAW,EAAE,SAAS,EAAE,WAAW,EAAE,QAAQ,CAAC;;AAE/J;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIC,0BAA0B,GAAG,eAAeL,OAAO,CAACG,IAAI,EAAEC,YAAY,EAAE,UAAAE,IAAI,EAAI;EACzF,IACEC,KAAK,GAYHD,IAAI,CAZNC,KAAK;IACLC,SAAS,GAWPF,IAAI,CAXNE,SAAS;IACTC,GAAG,GAUDH,IAAI,CAVNG,GAAG;IACHC,QAAQ,GASNJ,IAAI,CATNI,QAAQ;IACRC,MAAM,GAQJL,IAAI,CARNK,MAAM;IACNC,QAAQ,GAONN,IAAI,CAPNM,QAAQ;IACRC,eAAe,GAMbP,IAAI,CANNO,eAAe;IACfC,OAAO,GAKLR,IAAI,CALNQ,OAAO;IACPC,SAAS,GAIPT,IAAI,CAJNS,SAAS;IACTC,OAAO,GAGLV,IAAI,CAHNU,OAAO;IACPC,SAAS,GAEPX,IAAI,CAFNW,SAAS;IACTC,MAAM,GACJZ,IAAI,CADNY,MAAM;EAER,IAAIC,WAAW,GAAGlB,iBAAiB,CAAC;IAClCM,KAAK,EAALA,KAAK;IACLC,SAAS,EAATA,SAAS;IACTC,GAAG,EAAHA,GAAG;IACHC,QAAQ,EAARA,QAAQ;IACRC,MAAM,EAANA,MAAM;IACNC,QAAQ,EAARA,QAAQ;IACRC,eAAe,EAAfA,eAAe;IACfC,OAAO,EAAPA,OAAO;IACPC,SAAS,EAATA,SAAS;IACTC,OAAO,EAAPA,OAAO;IACPC,SAAS,EAATA,SAAS;IACTC,MAAM,EAANA;EACF,CAAC,CAAC;EACF,OAAOX,KAAK,CAAC,aAAa,EAAE;IAC1B,oCAAoC,EAAEY,WAAW;IACjD,4CAA4C,EAAE,SAAAC,iCAACC,GAAG,EAAEC,IAAI,EAAEC,GAAG;MAAA,OAAKJ,WAAW,CAACE,GAAG,EAAEC,IAAI,EAAEE,aAAa,CAACD,GAAG,CAAC,CAAC;IAAA;IAC5G,6CAA6C,EAAEJ,WAAW;IAC1D,qDAAqD,EAAE,SAAAM,wCAACJ,GAAG,EAAEC,IAAI,EAAEI,MAAM,EAAEH,GAAG;MAAA,OAAKJ,WAAW,CAACE,GAAG,EAAEC,IAAI,EAAEI,MAAM,EAAEF,aAAa,CAACD,GAAG,CAAC,CAAC;IAAA;IACrI,gCAAgC,EAAEJ,WAAW;IAC7C,wCAAwC,EAAE,SAAAQ,6BAACC,IAAI,EAAEN,IAAI,EAAEC,GAAG;MAAA,OAAKJ,WAAW,CAACS,IAAI,EAAEN,IAAI,EAAEE,aAAa,CAACD,GAAG,CAAC,CAAC;IAAA;IAC1G,yCAAyC,EAAEJ,WAAW;IACtD,iDAAiD,EAAE,SAAAU,oCAACD,IAAI,EAAEN,IAAI,EAAEI,MAAM,EAAEH,GAAG;MAAA,OAAKJ,WAAW,CAACS,IAAI,EAAEN,IAAI,EAAEI,MAAM,EAAEF,aAAa,CAACD,GAAG,CAAC,CAAC;IAAA;EACrI,CAAC,CAAC;EACF,SAASC,aAAaA,CAACD,GAAG,EAAE;IAC1B;IACA,OAAOrB,iBAAiB,CAAC,CAAC,EAAE,EAAEqB,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACxC;AACF,CAAC,EAAE;EACDO,mBAAmB,EAAE;AACvB,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}