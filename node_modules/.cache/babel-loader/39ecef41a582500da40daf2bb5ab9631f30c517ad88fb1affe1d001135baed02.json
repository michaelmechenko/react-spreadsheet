{"ast":null,"code":"import { CellText } from \"./cell-text.model\";\nimport { create, all } from \"mathjs\";\nexport class SpreadsheetCellModel {\n  constructor(row, col) {\n    this.isSelected = void 0;\n    this.textVisual = void 0;\n    this._buffer = void 0;\n    this._display = void 0;\n    this._reference = void 0;\n    this._buffer = \"\";\n    this._display = \"\";\n    this.isSelected = false;\n    this._reference = this.determineReference(row, col);\n    this.textVisual = new CellText.Builder().build();\n  }\n  setBuffer(buffer, replacedBuffer) {\n    this._buffer = buffer;\n    if (replacedBuffer !== undefined) {\n      try {\n        const math = create(all, {});\n        this._display = String(math.evaluate(replacedBuffer));\n      } catch {\n        throw new Error(\"Could not compute expression\");\n      }\n    } else {\n      this._display = this._buffer;\n    }\n    // fix\n    this._display = this._buffer;\n  }\n  getBuffer() {\n    return this._buffer;\n  }\n  getIsSelected() {\n    return this.isSelected;\n  }\n  setIsSelected(isSelected) {\n    this.isSelected = isSelected;\n  }\n  getDisplay() {\n    return this._display;\n  }\n  determineReference(row, col) {\n    const colChar = String.fromCharCode(64 + col);\n    const rowNum = row.toString();\n    return colChar + rowNum;\n  }\n  getReference() {\n    const ref = this._reference;\n    return ref;\n  }\n  setReference(row, col) {\n    this._reference = this.determineReference(row, col);\n  }\n  clearCell() {\n    this._buffer = \"\";\n    this._display = \"\";\n  }\n}","map":{"version":3,"names":["CellText","create","all","SpreadsheetCellModel","constructor","row","col","isSelected","textVisual","_buffer","_display","_reference","determineReference","Builder","build","setBuffer","buffer","replacedBuffer","undefined","math","String","evaluate","Error","getBuffer","getIsSelected","setIsSelected","getDisplay","colChar","fromCharCode","rowNum","toString","getReference","ref","setReference","clearCell"],"sources":["C:/Users/micha/Documents/mechenko_main/PEDAGOGY/fa23/CS4530/project/team111-project/implementation/src/model/domain/cells/spreadsheet-cell.model.ts"],"sourcesContent":["import { ICell } from \"../../interfaces/cell.interface\";\nimport { CellText } from \"./cell-text.model\";\nimport { create, all } from \"mathjs\";\n\nexport class SpreadsheetCellModel implements ICell {\n  private isSelected: boolean;\n  private textVisual: CellText;\n  private _buffer: string;\n  private _display: string;\n  private _reference: string;\n\n  public constructor(row: number, col: number) {\n    this._buffer = \"\";\n    this._display = \"\";\n    this.isSelected = false;\n    this._reference = this.determineReference(row, col);\n    this.textVisual = new CellText.Builder().build();\n  }\n\n  public setBuffer(buffer: string, replacedBuffer?: string): void {\n    this._buffer = buffer;\n\n    if (replacedBuffer !== undefined) {\n      try {\n        const math = create(all, {});\n        this._display = String(math.evaluate(replacedBuffer));\n      } catch {\n        throw new Error(\"Could not compute expression\");\n      }\n    } else {\n      this._display = this._buffer;\n    }\n    // fix\n    this._display = this._buffer;\n  }\n\n  public getBuffer(): string {\n    return this._buffer;\n  }\n\n  public getIsSelected(): boolean {\n    return this.isSelected;\n  }\n\n  public setIsSelected(isSelected: boolean): void {\n    this.isSelected = isSelected;\n  }\n\n  public getDisplay(): string {\n    return this._display;\n  }\n\n  public determineReference(row: number, col: number): string {\n    const colChar = String.fromCharCode(64 + col);\n    const rowNum = row.toString();\n\n    return colChar + rowNum;\n  }\n\n  public getReference(): string {\n    const ref = this._reference;\n    return ref;\n  }\n\n  public setReference(row: number, col: number) {\n    this._reference = this.determineReference(row, col);\n  }\n\n  public clearCell(): void {\n    this._buffer = \"\";\n    this._display = \"\";\n  }\n}\n"],"mappings":"AACA,SAASA,QAAQ,QAAQ,mBAAmB;AAC5C,SAASC,MAAM,EAAEC,GAAG,QAAQ,QAAQ;AAEpC,OAAO,MAAMC,oBAAoB,CAAkB;EAO1CC,WAAWA,CAACC,GAAW,EAAEC,GAAW,EAAE;IAAA,KANrCC,UAAU;IAAA,KACVC,UAAU;IAAA,KACVC,OAAO;IAAA,KACPC,QAAQ;IAAA,KACRC,UAAU;IAGhB,IAAI,CAACF,OAAO,GAAG,EAAE;IACjB,IAAI,CAACC,QAAQ,GAAG,EAAE;IAClB,IAAI,CAACH,UAAU,GAAG,KAAK;IACvB,IAAI,CAACI,UAAU,GAAG,IAAI,CAACC,kBAAkB,CAACP,GAAG,EAAEC,GAAG,CAAC;IACnD,IAAI,CAACE,UAAU,GAAG,IAAIR,QAAQ,CAACa,OAAO,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC;EAClD;EAEOC,SAASA,CAACC,MAAc,EAAEC,cAAuB,EAAQ;IAC9D,IAAI,CAACR,OAAO,GAAGO,MAAM;IAErB,IAAIC,cAAc,KAAKC,SAAS,EAAE;MAChC,IAAI;QACF,MAAMC,IAAI,GAAGlB,MAAM,CAACC,GAAG,EAAE,CAAC,CAAC,CAAC;QAC5B,IAAI,CAACQ,QAAQ,GAAGU,MAAM,CAACD,IAAI,CAACE,QAAQ,CAACJ,cAAc,CAAC,CAAC;MACvD,CAAC,CAAC,MAAM;QACN,MAAM,IAAIK,KAAK,CAAC,8BAA8B,CAAC;MACjD;IACF,CAAC,MAAM;MACL,IAAI,CAACZ,QAAQ,GAAG,IAAI,CAACD,OAAO;IAC9B;IACA;IACA,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACD,OAAO;EAC9B;EAEOc,SAASA,CAAA,EAAW;IACzB,OAAO,IAAI,CAACd,OAAO;EACrB;EAEOe,aAAaA,CAAA,EAAY;IAC9B,OAAO,IAAI,CAACjB,UAAU;EACxB;EAEOkB,aAAaA,CAAClB,UAAmB,EAAQ;IAC9C,IAAI,CAACA,UAAU,GAAGA,UAAU;EAC9B;EAEOmB,UAAUA,CAAA,EAAW;IAC1B,OAAO,IAAI,CAAChB,QAAQ;EACtB;EAEOE,kBAAkBA,CAACP,GAAW,EAAEC,GAAW,EAAU;IAC1D,MAAMqB,OAAO,GAAGP,MAAM,CAACQ,YAAY,CAAC,EAAE,GAAGtB,GAAG,CAAC;IAC7C,MAAMuB,MAAM,GAAGxB,GAAG,CAACyB,QAAQ,CAAC,CAAC;IAE7B,OAAOH,OAAO,GAAGE,MAAM;EACzB;EAEOE,YAAYA,CAAA,EAAW;IAC5B,MAAMC,GAAG,GAAG,IAAI,CAACrB,UAAU;IAC3B,OAAOqB,GAAG;EACZ;EAEOC,YAAYA,CAAC5B,GAAW,EAAEC,GAAW,EAAE;IAC5C,IAAI,CAACK,UAAU,GAAG,IAAI,CAACC,kBAAkB,CAACP,GAAG,EAAEC,GAAG,CAAC;EACrD;EAEO4B,SAASA,CAAA,EAAS;IACvB,IAAI,CAACzB,OAAO,GAAG,EAAE;IACjB,IAAI,CAACC,QAAQ,GAAG,EAAE;EACpB;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}