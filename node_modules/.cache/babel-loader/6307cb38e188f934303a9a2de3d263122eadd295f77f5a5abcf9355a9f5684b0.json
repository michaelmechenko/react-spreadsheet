{"ast":null,"code":"var _createForOfIteratorHelper = require(\"C:/Users/micha/Documents/mechenko_main/PEDAGOGY/fa23/CS4530/project/team111-project/implementation/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global[\"'typed'\"] = factory());\n})(this, function () {\n  'use strict';\n\n  function ok() {\n    return true;\n  }\n  function notOk() {\n    return false;\n  }\n  function undef() {\n    return undefined;\n  }\n  var NOT_TYPED_FUNCTION = 'Argument is not a typed-function.';\n  /**\n   * @typedef {{\n   *   params: Param[],\n   *   fn: function,\n   *   test: function,\n   *   implementation: function\n   * }} Signature\n   *\n   * @typedef {{\n   *   types: Type[],\n   *   hasAny: boolean,\n   *   hasConversion: boolean,\n   *   restParam: boolean\n   * }} Param\n   *\n   * @typedef {{\n   *   name: string,\n   *   typeIndex: number,\n   *   test: function,\n   *   isAny: boolean,\n   *   conversion?: ConversionDef,\n   *   conversionIndex: number,\n   * }} Type\n   *\n   * @typedef {{\n   *   from: string,\n   *   to: string,\n   *   convert: function (*) : *\n   * }} ConversionDef\n   *\n   * @typedef {{\n   *   name: string,\n   *   test: function(*) : boolean,\n   *   isAny?: boolean\n   * }} TypeDef\n   */\n\n  /**\n   * @returns {() => function}\n   */\n\n  function create() {\n    // data type tests\n\n    /**\n     * Returns true if the argument is a non-null \"plain\" object\n     */\n    function isPlainObject(x) {\n      return typeof x === 'object' && x !== null && x.constructor === Object;\n    }\n    var _types = [{\n      name: 'number',\n      test: function test(x) {\n        return typeof x === 'number';\n      }\n    }, {\n      name: 'string',\n      test: function test(x) {\n        return typeof x === 'string';\n      }\n    }, {\n      name: 'boolean',\n      test: function test(x) {\n        return typeof x === 'boolean';\n      }\n    }, {\n      name: 'Function',\n      test: function test(x) {\n        return typeof x === 'function';\n      }\n    }, {\n      name: 'Array',\n      test: Array.isArray\n    }, {\n      name: 'Date',\n      test: function test(x) {\n        return x instanceof Date;\n      }\n    }, {\n      name: 'RegExp',\n      test: function test(x) {\n        return x instanceof RegExp;\n      }\n    }, {\n      name: 'Object',\n      test: isPlainObject\n    }, {\n      name: 'null',\n      test: function test(x) {\n        return x === null;\n      }\n    }, {\n      name: 'undefined',\n      test: function test(x) {\n        return x === undefined;\n      }\n    }];\n    var anyType = {\n      name: 'any',\n      test: ok,\n      isAny: true\n    }; // Data structures to track the types. As these are local variables in\n    // create(), each typed universe will get its own copy, but the variables\n    // will only be accessible through the (closures of the) functions supplied\n    // as properties of the typed object, not directly.\n    // These will be initialized in clear() below\n\n    var typeMap; // primary store of all types\n\n    var typeList; // Array of just type names, for the sake of ordering\n    // And similar data structures for the type conversions:\n\n    var nConversions = 0; // the actual conversions are stored on a property of the destination types\n    // This is a temporary object, will be replaced with a function at the end\n\n    var typed = {\n      createCount: 0\n    };\n    /**\n     * Takes a type name and returns the corresponding official type object\n     * for that type.\n     *\n     * @param {string} typeName\n     * @returns {TypeDef} type\n     */\n\n    function findType(typeName) {\n      var type = typeMap.get(typeName);\n      if (type) {\n        return type;\n      } // Remainder is error handling\n\n      var message = 'Unknown type \"' + typeName + '\"';\n      var name = typeName.toLowerCase();\n      var otherName;\n      var _iterator = _createForOfIteratorHelper(typeList),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          otherName = _step.value;\n          if (otherName.toLowerCase() === name) {\n            message += '. Did you mean \"' + otherName + '\" ?';\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      throw new TypeError(message);\n    }\n    /**\n     * Adds an array `types` of type definitions to this typed instance.\n     * Each type definition should be an object with properties:\n     * 'name' - a string giving the name of the type; 'test' - function\n     * returning a boolean that tests membership in the type; and optionally\n     * 'isAny' - true only for the 'any' type.\n     *\n     * The second optional argument, `before`, gives the name of a type that\n     * these types should be added before. The new types are added in the\n     * order specified.\n     * @param {TypeDef[]} types\n     * @param {string | boolean} [beforeSpec='any'] before\n     */\n\n    function addTypes(types) {\n      var beforeSpec = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'any';\n      var beforeIndex = beforeSpec ? findType(beforeSpec).index : typeList.length;\n      var newTypes = [];\n      for (var i = 0; i < types.length; ++i) {\n        if (!types[i] || typeof types[i].name !== 'string' || typeof types[i].test !== 'function') {\n          throw new TypeError('Object with properties {name: string, test: function} expected');\n        }\n        var typeName = types[i].name;\n        if (typeMap.has(typeName)) {\n          throw new TypeError('Duplicate type name \"' + typeName + '\"');\n        }\n        newTypes.push(typeName);\n        typeMap.set(typeName, {\n          name: typeName,\n          test: types[i].test,\n          isAny: types[i].isAny,\n          index: beforeIndex + i,\n          conversionsTo: [] // Newly added type can't have any conversions to it\n        });\n      } // update the typeList\n\n      var affectedTypes = typeList.slice(beforeIndex);\n      typeList = typeList.slice(0, beforeIndex).concat(newTypes).concat(affectedTypes); // Fix the indices\n\n      for (var _i = beforeIndex + newTypes.length; _i < typeList.length; ++_i) {\n        typeMap.get(typeList[_i]).index = _i;\n      }\n    }\n    /**\n     * Removes all types and conversions from this typed instance.\n     * May cause previously constructed typed-functions to throw\n     * strange errors when they are called with types that do not\n     * match any of their signatures.\n     */\n\n    function clear() {\n      typeMap = new Map();\n      typeList = [];\n      nConversions = 0;\n      addTypes([anyType], false);\n    } // initialize the types to the default list\n\n    clear();\n    addTypes(_types);\n    /**\n     * Removes all conversions, leaving the types alone.\n     */\n\n    function clearConversions() {\n      var typeName;\n      var _iterator2 = _createForOfIteratorHelper(typeList),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          typeName = _step2.value;\n          typeMap.get(typeName).conversionsTo = [];\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      nConversions = 0;\n    }\n    /**\n     * Find the type names that match a value.\n     * @param {*} value\n     * @return {string[]} Array of names of types for which\n     *                  the type test matches the value.\n     */\n\n    function findTypeNames(value) {\n      var matches = typeList.filter(function (name) {\n        var type = typeMap.get(name);\n        return !type.isAny && type.test(value);\n      });\n      if (matches.length) {\n        return matches;\n      }\n      return ['any'];\n    }\n    /**\n     * Check if an entity is a typed function created by any instance\n     * @param {any} entity\n     * @returns {boolean}\n     */\n\n    function isTypedFunction(entity) {\n      return entity && typeof entity === 'function' && '_typedFunctionData' in entity;\n    }\n    /**\n     * Find a specific signature from a (composed) typed function, for example:\n     *\n     *   typed.findSignature(fn, ['number', 'string'])\n     *   typed.findSignature(fn, 'number, string')\n     *   typed.findSignature(fn, 'number,string', {exact: true})\n     *\n     * This function findSignature will by default return the best match to\n     * the given signature, possibly employing type conversions.\n     *\n     * The (optional) third argument is a plain object giving options\n     * controlling the signature search. Currently the only implemented\n     * option is `exact`: if specified as true (default is false), only\n     * exact matches will be returned (i.e. signatures for which `fn` was\n     * directly defined). Note that a (possibly different) type matching\n     * `any`, or one or more instances of TYPE matching `...TYPE` are\n     * considered exact matches in this regard, as no conversions are used.\n     *\n     * This function returns a \"signature\" object, as does `typed.resolve()`,\n     * which is a plain object with four keys: `params` (the array of parameters\n     * for this signature), `fn` (the originally supplied function for this\n     * signature), `test` (a generated function that determines if an argument\n     * list matches this signature, and `implementation` (the function to call\n     * on a matching argument list, that performs conversions if necessary and\n     * then calls the originally supplied function).\n     *\n     * @param {Function} fn                   A typed-function\n     * @param {string | string[]} signature\n     *     Signature to be found, can be an array or a comma separated string.\n     * @param {object} options  Controls the signature search as documented\n     * @return {{ params: Param[], fn: function, test: function, implementation: function }}\n     *     Returns the matching signature, or throws an error when no signature\n     *     is found.\n     */\n\n    function findSignature(fn, signature, options) {\n      if (!isTypedFunction(fn)) {\n        throw new TypeError(NOT_TYPED_FUNCTION);\n      } // Canonicalize input\n\n      var exact = options && options.exact;\n      var stringSignature = Array.isArray(signature) ? signature.join(',') : signature;\n      var params = parseSignature(stringSignature);\n      var canonicalSignature = stringifyParams(params); // First hope we get lucky and exactly match a signature\n\n      if (!exact || canonicalSignature in fn.signatures) {\n        // OK, we can check the internal signatures\n        var match = fn._typedFunctionData.signatureMap.get(canonicalSignature);\n        if (match) {\n          return match;\n        }\n      } // Oh well, we did not; so we have to go back and check the parameters\n      // one by one, in order to catch things like `any` and rest params.\n      // Note here we can assume there is at least one parameter, because\n      // the empty signature would have matched successfully above.\n\n      var nParams = params.length;\n      var remainingSignatures;\n      if (exact) {\n        remainingSignatures = [];\n        var name;\n        for (name in fn.signatures) {\n          remainingSignatures.push(fn._typedFunctionData.signatureMap.get(name));\n        }\n      } else {\n        remainingSignatures = fn._typedFunctionData.signatures;\n      }\n      for (var i = 0; i < nParams; ++i) {\n        var want = params[i];\n        var filteredSignatures = [];\n        var possibility = void 0;\n        var _iterator3 = _createForOfIteratorHelper(remainingSignatures),\n          _step3;\n        try {\n          var _loop = function _loop() {\n              possibility = _step3.value;\n              var have = getParamAtIndex(possibility.params, i);\n              if (!have || want.restParam && !have.restParam) {\n                return 0; // continue\n              }\n              if (!have.hasAny) {\n                // have to check all of the wanted types are available\n                var haveTypes = paramTypeSet(have);\n                if (want.types.some(function (wtype) {\n                  return !haveTypes.has(wtype.name);\n                })) {\n                  return 0; // continue\n                }\n              } // OK, this looks good\n\n              filteredSignatures.push(possibility);\n            },\n            _ret;\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            _ret = _loop();\n            if (_ret === 0) continue;\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n        remainingSignatures = filteredSignatures;\n        if (remainingSignatures.length === 0) break;\n      } // Return the first remaining signature that was totally matched:\n\n      var candidate;\n      var _iterator4 = _createForOfIteratorHelper(remainingSignatures),\n        _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          candidate = _step4.value;\n          if (candidate.params.length <= nParams) {\n            return candidate;\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n      throw new TypeError('Signature not found (signature: ' + (fn.name || 'unnamed') + '(' + stringifyParams(params, ', ') + '))');\n    }\n    /**\n     * Find the proper function to call for a specific signature from\n     * a (composed) typed function, for example:\n     *\n     *   typed.find(fn, ['number', 'string'])\n     *   typed.find(fn, 'number, string')\n     *   typed.find(fn, 'number,string', {exact: true})\n     *\n     * This function find will by default return the best match to\n     * the given signature, possibly employing type conversions (and returning\n     * a function that will perform those conversions as needed). The\n     * (optional) third argument is a plain object giving options contolling\n     * the signature search. Currently only the option `exact` is implemented,\n     * which defaults to \"false\". If `exact` is specified as true, then only\n     * exact matches will be returned (i.e. signatures for which `fn` was\n     * directly defined). Uses of `any` and `...TYPE` are considered exact if\n     * no conversions are necessary to apply the corresponding function.\n     *\n     * @param {Function} fn                   A typed-function\n     * @param {string | string[]} signature\n     *     Signature to be found, can be an array or a comma separated string.\n     * @param {object} options  Controls the signature match as documented\n     * @return {function}\n     *     Returns the function to call for the given signature, or throws an\n     *     error if no match is found.\n     */\n\n    function find(fn, signature, options) {\n      return findSignature(fn, signature, options).implementation;\n    }\n    /**\n     * Convert a given value to another data type, specified by type name.\n     *\n     * @param {*} value\n     * @param {string} typeName\n     */\n\n    function convert(value, typeName) {\n      // check conversion is needed\n      var type = findType(typeName);\n      if (type.test(value)) {\n        return value;\n      }\n      var conversions = type.conversionsTo;\n      if (conversions.length === 0) {\n        throw new Error('There are no conversions to ' + typeName + ' defined.');\n      }\n      for (var i = 0; i < conversions.length; i++) {\n        var fromType = findType(conversions[i].from);\n        if (fromType.test(value)) {\n          return conversions[i].convert(value);\n        }\n      }\n      throw new Error('Cannot convert ' + value + ' to ' + typeName);\n    }\n    /**\n     * Stringify parameters in a normalized way\n     * @param {Param[]} params\n     * @param {string} [','] separator\n     * @return {string}\n     */\n\n    function stringifyParams(params) {\n      var separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ',';\n      return params.map(function (p) {\n        return p.name;\n      }).join(separator);\n    }\n    /**\n     * Parse a parameter, like \"...number | boolean\"\n     * @param {string} param\n     * @return {Param} param\n     */\n\n    function parseParam(param) {\n      var restParam = param.indexOf('...') === 0;\n      var types = !restParam ? param : param.length > 3 ? param.slice(3) : 'any';\n      var typeDefs = types.split('|').map(function (s) {\n        return findType(s.trim());\n      });\n      var hasAny = false;\n      var paramName = restParam ? '...' : '';\n      var exactTypes = typeDefs.map(function (type) {\n        hasAny = type.isAny || hasAny;\n        paramName += type.name + '|';\n        return {\n          name: type.name,\n          typeIndex: type.index,\n          test: type.test,\n          isAny: type.isAny,\n          conversion: null,\n          conversionIndex: -1\n        };\n      });\n      return {\n        types: exactTypes,\n        name: paramName.slice(0, -1),\n        // remove trailing '|' from above\n        hasAny: hasAny,\n        hasConversion: false,\n        restParam: restParam\n      };\n    }\n    /**\n     * Expands a parsed parameter with the types available from currently\n     * defined conversions.\n     * @param {Param} param\n     * @return {Param} param\n     */\n\n    function expandParam(param) {\n      var typeNames = param.types.map(function (t) {\n        return t.name;\n      });\n      var matchingConversions = availableConversions(typeNames);\n      var hasAny = param.hasAny;\n      var newName = param.name;\n      var convertibleTypes = matchingConversions.map(function (conversion) {\n        var type = findType(conversion.from);\n        hasAny = type.isAny || hasAny;\n        newName += '|' + conversion.from;\n        return {\n          name: conversion.from,\n          typeIndex: type.index,\n          test: type.test,\n          isAny: type.isAny,\n          conversion: conversion,\n          conversionIndex: conversion.index\n        };\n      });\n      return {\n        types: param.types.concat(convertibleTypes),\n        name: newName,\n        hasAny: hasAny,\n        hasConversion: convertibleTypes.length > 0,\n        restParam: param.restParam\n      };\n    }\n    /**\n     * Return the set of type names in a parameter.\n     * Caches the result for efficiency\n     *\n     * @param {Param} param\n     * @return {Set<string>} typenames\n     */\n\n    function paramTypeSet(param) {\n      if (!param.typeSet) {\n        param.typeSet = new Set();\n        param.types.forEach(function (type) {\n          return param.typeSet.add(type.name);\n        });\n      }\n      return param.typeSet;\n    }\n    /**\n     * Parse a signature with comma separated parameters,\n     * like \"number | boolean, ...string\"\n     *\n     * @param {string} signature\n     * @return {Param[]} params\n     */\n\n    function parseSignature(rawSignature) {\n      var params = [];\n      if (typeof rawSignature !== 'string') {\n        throw new TypeError('Signatures must be strings');\n      }\n      var signature = rawSignature.trim();\n      if (signature === '') {\n        return params;\n      }\n      var rawParams = signature.split(',');\n      for (var i = 0; i < rawParams.length; ++i) {\n        var parsedParam = parseParam(rawParams[i].trim());\n        if (parsedParam.restParam && i !== rawParams.length - 1) {\n          throw new SyntaxError('Unexpected rest parameter \"' + rawParams[i] + '\": ' + 'only allowed for the last parameter');\n        } // if invalid, short-circuit (all the types may have been filtered)\n\n        if (parsedParam.types.length === 0) {\n          return null;\n        }\n        params.push(parsedParam);\n      }\n      return params;\n    }\n    /**\n     * Test whether a set of params contains a restParam\n     * @param {Param[]} params\n     * @return {boolean} Returns true when the last parameter is a restParam\n     */\n\n    function hasRestParam(params) {\n      var param = last(params);\n      return param ? param.restParam : false;\n    }\n    /**\n     * Create a type test for a single parameter, which can have one or multiple\n     * types.\n     * @param {Param} param\n     * @return {function(x: *) : boolean} Returns a test function\n     */\n\n    function compileTest(param) {\n      if (!param || param.types.length === 0) {\n        // nothing to do\n        return ok;\n      } else if (param.types.length === 1) {\n        return findType(param.types[0].name).test;\n      } else if (param.types.length === 2) {\n        var test0 = findType(param.types[0].name).test;\n        var test1 = findType(param.types[1].name).test;\n        return function or(x) {\n          return test0(x) || test1(x);\n        };\n      } else {\n        // param.types.length > 2\n        var tests = param.types.map(function (type) {\n          return findType(type.name).test;\n        });\n        return function or(x) {\n          for (var i = 0; i < tests.length; i++) {\n            if (tests[i](x)) {\n              return true;\n            }\n          }\n          return false;\n        };\n      }\n    }\n    /**\n     * Create a test for all parameters of a signature\n     * @param {Param[]} params\n     * @return {function(args: Array<*>) : boolean}\n     */\n\n    function compileTests(params) {\n      var tests, test0, test1;\n      if (hasRestParam(params)) {\n        // variable arguments like '...number'\n        tests = initial(params).map(compileTest);\n        var varIndex = tests.length;\n        var lastTest = compileTest(last(params));\n        var testRestParam = function testRestParam(args) {\n          for (var i = varIndex; i < args.length; i++) {\n            if (!lastTest(args[i])) {\n              return false;\n            }\n          }\n          return true;\n        };\n        return function testArgs(args) {\n          for (var i = 0; i < tests.length; i++) {\n            if (!tests[i](args[i])) {\n              return false;\n            }\n          }\n          return testRestParam(args) && args.length >= varIndex + 1;\n        };\n      } else {\n        // no variable arguments\n        if (params.length === 0) {\n          return function testArgs(args) {\n            return args.length === 0;\n          };\n        } else if (params.length === 1) {\n          test0 = compileTest(params[0]);\n          return function testArgs(args) {\n            return test0(args[0]) && args.length === 1;\n          };\n        } else if (params.length === 2) {\n          test0 = compileTest(params[0]);\n          test1 = compileTest(params[1]);\n          return function testArgs(args) {\n            return test0(args[0]) && test1(args[1]) && args.length === 2;\n          };\n        } else {\n          // arguments.length > 2\n          tests = params.map(compileTest);\n          return function testArgs(args) {\n            for (var i = 0; i < tests.length; i++) {\n              if (!tests[i](args[i])) {\n                return false;\n              }\n            }\n            return args.length === tests.length;\n          };\n        }\n      }\n    }\n    /**\n     * Find the parameter at a specific index of a Params list.\n     * Handles rest parameters.\n     * @param {Param[]} params\n     * @param {number} index\n     * @return {Param | null} Returns the matching parameter when found,\n     *                        null otherwise.\n     */\n\n    function getParamAtIndex(params, index) {\n      return index < params.length ? params[index] : hasRestParam(params) ? last(params) : null;\n    }\n    /**\n     * Get all type names of a parameter\n     * @param {Params[]} params\n     * @param {number} index\n     * @return {string[]} Returns an array with type names\n     */\n\n    function getTypeSetAtIndex(params, index) {\n      var param = getParamAtIndex(params, index);\n      if (!param) {\n        return new Set();\n      }\n      return paramTypeSet(param);\n    }\n    /**\n     * Test whether a type is an exact type or conversion\n     * @param {Type} type\n     * @return {boolean} Returns true when\n     */\n\n    function isExactType(type) {\n      return type.conversion === null || type.conversion === undefined;\n    }\n    /**\n     * Helper function for creating error messages: create an array with\n     * all available types on a specific argument index.\n     * @param {Signature[]} signatures\n     * @param {number} index\n     * @return {string[]} Returns an array with available types\n     */\n\n    function mergeExpectedParams(signatures, index) {\n      var typeSet = new Set();\n      signatures.forEach(function (signature) {\n        var paramSet = getTypeSetAtIndex(signature.params, index);\n        var name;\n        var _iterator5 = _createForOfIteratorHelper(paramSet),\n          _step5;\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            name = _step5.value;\n            typeSet.add(name);\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n      });\n      return typeSet.has('any') ? ['any'] : Array.from(typeSet);\n    }\n    /**\n     * Create\n     * @param {string} name             The name of the function\n     * @param {array.<*>} args          The actual arguments passed to the function\n     * @param {Signature[]} signatures  A list with available signatures\n     * @return {TypeError} Returns a type error with additional data\n     *                     attached to it in the property `data`\n     */\n\n    function createError(name, args, signatures) {\n      var err, expected;\n      var _name = name || 'unnamed'; // test for wrong type at some index\n\n      var matchingSignatures = signatures;\n      var index;\n      var _loop2 = function _loop2() {\n          var nextMatchingDefs = [];\n          matchingSignatures.forEach(function (signature) {\n            var param = getParamAtIndex(signature.params, index);\n            var test = compileTest(param);\n            if ((index < signature.params.length || hasRestParam(signature.params)) && test(args[index])) {\n              nextMatchingDefs.push(signature);\n            }\n          });\n          if (nextMatchingDefs.length === 0) {\n            // no matching signatures anymore, throw error \"wrong type\"\n            expected = mergeExpectedParams(matchingSignatures, index);\n            if (expected.length > 0) {\n              var actualTypes = findTypeNames(args[index]);\n              err = new TypeError('Unexpected type of argument in function ' + _name + ' (expected: ' + expected.join(' or ') + ', actual: ' + actualTypes.join(' | ') + ', index: ' + index + ')');\n              err.data = {\n                category: 'wrongType',\n                fn: _name,\n                index: index,\n                actual: actualTypes,\n                expected: expected\n              };\n              return {\n                v: err\n              };\n            }\n          } else {\n            matchingSignatures = nextMatchingDefs;\n          }\n        },\n        _ret2;\n      for (index = 0; index < args.length; index++) {\n        _ret2 = _loop2();\n        if (_ret2) return _ret2.v;\n      } // test for too few arguments\n\n      var lengths = matchingSignatures.map(function (signature) {\n        return hasRestParam(signature.params) ? Infinity : signature.params.length;\n      });\n      if (args.length < Math.min.apply(null, lengths)) {\n        expected = mergeExpectedParams(matchingSignatures, index);\n        err = new TypeError('Too few arguments in function ' + _name + ' (expected: ' + expected.join(' or ') + ', index: ' + args.length + ')');\n        err.data = {\n          category: 'tooFewArgs',\n          fn: _name,\n          index: args.length,\n          expected: expected\n        };\n        return err;\n      } // test for too many arguments\n\n      var maxLength = Math.max.apply(null, lengths);\n      if (args.length > maxLength) {\n        err = new TypeError('Too many arguments in function ' + _name + ' (expected: ' + maxLength + ', actual: ' + args.length + ')');\n        err.data = {\n          category: 'tooManyArgs',\n          fn: _name,\n          index: args.length,\n          expectedLength: maxLength\n        };\n        return err;\n      } // Generic error\n\n      var argTypes = [];\n      for (var i = 0; i < args.length; ++i) {\n        argTypes.push(findTypeNames(args[i]).join('|'));\n      }\n      err = new TypeError('Arguments of type \"' + argTypes.join(', ') + '\" do not match any of the defined signatures of function ' + _name + '.');\n      err.data = {\n        category: 'mismatch',\n        actual: argTypes\n      };\n      return err;\n    }\n    /**\n     * Find the lowest index of all exact types of a parameter (no conversions)\n     * @param {Param} param\n     * @return {number} Returns the index of the lowest type in typed.types\n     */\n\n    function getLowestTypeIndex(param) {\n      var min = typeList.length + 1;\n      for (var i = 0; i < param.types.length; i++) {\n        if (isExactType(param.types[i])) {\n          min = Math.min(min, param.types[i].typeIndex);\n        }\n      }\n      return min;\n    }\n    /**\n     * Find the lowest index of the conversion of all types of the parameter\n     * having a conversion\n     * @param {Param} param\n     * @return {number} Returns the lowest index of the conversions of this type\n     */\n\n    function getLowestConversionIndex(param) {\n      var min = nConversions + 1;\n      for (var i = 0; i < param.types.length; i++) {\n        if (!isExactType(param.types[i])) {\n          min = Math.min(min, param.types[i].conversionIndex);\n        }\n      }\n      return min;\n    }\n    /**\n     * Compare two params\n     * @param {Param} param1\n     * @param {Param} param2\n     * @return {number} returns -1 when param1 must get a lower\n     *                  index than param2, 1 when the opposite,\n     *                  or zero when both are equal\n     */\n\n    function compareParams(param1, param2) {\n      // We compare a number of metrics on a param in turn:\n      // 1) 'any' parameters are the least preferred\n      if (param1.hasAny) {\n        if (!param2.hasAny) {\n          return 1;\n        }\n      } else if (param2.hasAny) {\n        return -1;\n      } // 2) Prefer non-rest to rest parameters\n\n      if (param1.restParam) {\n        if (!param2.restParam) {\n          return 1;\n        }\n      } else if (param2.restParam) {\n        return -1;\n      } // 3) Prefer exact type match to conversions\n\n      if (param1.hasConversion) {\n        if (!param2.hasConversion) {\n          return 1;\n        }\n      } else if (param2.hasConversion) {\n        return -1;\n      } // 4) Prefer lower type index:\n\n      var typeDiff = getLowestTypeIndex(param1) - getLowestTypeIndex(param2);\n      if (typeDiff < 0) {\n        return -1;\n      }\n      if (typeDiff > 0) {\n        return 1;\n      } // 5) Prefer lower conversion index\n\n      var convDiff = getLowestConversionIndex(param1) - getLowestConversionIndex(param2);\n      if (convDiff < 0) {\n        return -1;\n      }\n      if (convDiff > 0) {\n        return 1;\n      } // Don't have a basis for preference\n\n      return 0;\n    }\n    /**\n     * Compare two signatures\n     * @param {Signature} signature1\n     * @param {Signature} signature2\n     * @return {number} returns a negative number when param1 must get a lower\n     *                  index than param2, a positive number when the opposite,\n     *                  or zero when both are equal\n     */\n\n    function compareSignatures(signature1, signature2) {\n      var pars1 = signature1.params;\n      var pars2 = signature2.params;\n      var last1 = last(pars1);\n      var last2 = last(pars2);\n      var hasRest1 = hasRestParam(pars1);\n      var hasRest2 = hasRestParam(pars2); // We compare a number of metrics on signatures in turn:\n      // 1) An \"any rest param\" is least preferred\n\n      if (hasRest1 && last1.hasAny) {\n        if (!hasRest2 || !last2.hasAny) {\n          return 1;\n        }\n      } else if (hasRest2 && last2.hasAny) {\n        return -1;\n      } // 2) Minimize the number of 'any' parameters\n\n      var any1 = 0;\n      var conv1 = 0;\n      var par;\n      var _iterator6 = _createForOfIteratorHelper(pars1),\n        _step6;\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          par = _step6.value;\n          if (par.hasAny) ++any1;\n          if (par.hasConversion) ++conv1;\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n      var any2 = 0;\n      var conv2 = 0;\n      var _iterator7 = _createForOfIteratorHelper(pars2),\n        _step7;\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          par = _step7.value;\n          if (par.hasAny) ++any2;\n          if (par.hasConversion) ++conv2;\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n      if (any1 !== any2) {\n        return any1 - any2;\n      } // 3) A conversion rest param is less preferred\n\n      if (hasRest1 && last1.hasConversion) {\n        if (!hasRest2 || !last2.hasConversion) {\n          return 1;\n        }\n      } else if (hasRest2 && last2.hasConversion) {\n        return -1;\n      } // 4) Minimize the number of conversions\n\n      if (conv1 !== conv2) {\n        return conv1 - conv2;\n      } // 5) Prefer no rest param\n\n      if (hasRest1) {\n        if (!hasRest2) {\n          return 1;\n        }\n      } else if (hasRest2) {\n        return -1;\n      } // 6) Prefer shorter with rest param, longer without\n\n      var lengthCriterion = (pars1.length - pars2.length) * (hasRest1 ? -1 : 1);\n      if (lengthCriterion !== 0) {\n        return lengthCriterion;\n      } // Signatures are identical in each of the above metrics.\n      // In particular, they are the same length.\n      // We can therefore compare the parameters one by one.\n      // First we count which signature has more preferred parameters.\n\n      var comparisons = [];\n      var tc = 0;\n      for (var i = 0; i < pars1.length; ++i) {\n        var thisComparison = compareParams(pars1[i], pars2[i]);\n        comparisons.push(thisComparison);\n        tc += thisComparison;\n      }\n      if (tc !== 0) {\n        return tc;\n      } // They have the same number of preferred parameters, so go by the\n      // earliest parameter in which we have a preference.\n      // In other words, dispatch is driven somewhat more by earlier\n      // parameters than later ones.\n\n      var c;\n      for (var _i2 = 0, _comparisons = comparisons; _i2 < _comparisons.length; _i2++) {\n        c = _comparisons[_i2];\n        if (c !== 0) {\n          return c;\n        }\n      } // It's a tossup:\n\n      return 0;\n    }\n    /**\n     * Produce a list of all conversions from distinct types to one of\n     * the given types.\n     *\n     * @param {string[]} typeNames\n     * @return {ConversionDef[]} Returns the conversions that are available\n     *                        resulting in any given type (if any)\n     */\n\n    function availableConversions(typeNames) {\n      if (typeNames.length === 0) {\n        return [];\n      }\n      var types = typeNames.map(findType);\n      if (typeNames.length > 1) {\n        types.sort(function (t1, t2) {\n          return t1.index - t2.index;\n        });\n      }\n      var matches = types[0].conversionsTo;\n      if (typeNames.length === 1) {\n        return matches;\n      }\n      matches = matches.concat([]); // shallow copy the matches\n      // Since the types are now in index order, we just want the first\n      // occurrence of any from type:\n\n      var knownTypes = new Set(typeNames);\n      for (var i = 1; i < types.length; ++i) {\n        var newMatch = void 0;\n        var _iterator8 = _createForOfIteratorHelper(types[i].conversionsTo),\n          _step8;\n        try {\n          for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n            newMatch = _step8.value;\n            if (!knownTypes.has(newMatch.from)) {\n              matches.push(newMatch);\n              knownTypes.add(newMatch.from);\n            }\n          }\n        } catch (err) {\n          _iterator8.e(err);\n        } finally {\n          _iterator8.f();\n        }\n      }\n      return matches;\n    }\n    /**\n     * Preprocess arguments before calling the original function:\n     * - if needed convert the parameters\n     * - in case of rest parameters, move the rest parameters into an Array\n     * @param {Param[]} params\n     * @param {function} fn\n     * @return {function} Returns a wrapped function\n     */\n\n    function compileArgsPreprocessing(params, fn) {\n      var fnConvert = fn; // TODO: can we make this wrapper function smarter/simpler?\n\n      if (params.some(function (p) {\n        return p.hasConversion;\n      })) {\n        var restParam = hasRestParam(params);\n        var compiledConversions = params.map(compileArgConversion);\n        fnConvert = function convertArgs() {\n          var args = [];\n          var last = restParam ? arguments.length - 1 : arguments.length;\n          for (var i = 0; i < last; i++) {\n            args[i] = compiledConversions[i](arguments[i]);\n          }\n          if (restParam) {\n            args[last] = arguments[last].map(compiledConversions[last]);\n          }\n          return fn.apply(this, args);\n        };\n      }\n      var fnPreprocess = fnConvert;\n      if (hasRestParam(params)) {\n        var offset = params.length - 1;\n        fnPreprocess = function preprocessRestParams() {\n          return fnConvert.apply(this, slice(arguments, 0, offset).concat([slice(arguments, offset)]));\n        };\n      }\n      return fnPreprocess;\n    }\n    /**\n     * Compile conversion for a parameter to the right type\n     * @param {Param} param\n     * @return {function} Returns the wrapped function that will convert arguments\n     *\n     */\n\n    function compileArgConversion(param) {\n      var test0, test1, conversion0, conversion1;\n      var tests = [];\n      var conversions = [];\n      param.types.forEach(function (type) {\n        if (type.conversion) {\n          tests.push(findType(type.conversion.from).test);\n          conversions.push(type.conversion.convert);\n        }\n      }); // create optimized conversion functions depending on the number of conversions\n\n      switch (conversions.length) {\n        case 0:\n          return function convertArg(arg) {\n            return arg;\n          };\n        case 1:\n          test0 = tests[0];\n          conversion0 = conversions[0];\n          return function convertArg(arg) {\n            if (test0(arg)) {\n              return conversion0(arg);\n            }\n            return arg;\n          };\n        case 2:\n          test0 = tests[0];\n          test1 = tests[1];\n          conversion0 = conversions[0];\n          conversion1 = conversions[1];\n          return function convertArg(arg) {\n            if (test0(arg)) {\n              return conversion0(arg);\n            }\n            if (test1(arg)) {\n              return conversion1(arg);\n            }\n            return arg;\n          };\n        default:\n          return function convertArg(arg) {\n            for (var i = 0; i < conversions.length; i++) {\n              if (tests[i](arg)) {\n                return conversions[i](arg);\n              }\n            }\n            return arg;\n          };\n      }\n    }\n    /**\n     * Split params with union types in to separate params.\n     *\n     * For example:\n     *\n     *     splitParams([['Array', 'Object'], ['string', 'RegExp'])\n     *     // returns:\n     *     // [\n     *     //   ['Array', 'string'],\n     *     //   ['Array', 'RegExp'],\n     *     //   ['Object', 'string'],\n     *     //   ['Object', 'RegExp']\n     *     // ]\n     *\n     * @param {Param[]} params\n     * @return {Param[]}\n     */\n\n    function splitParams(params) {\n      function _splitParams(params, index, paramsSoFar) {\n        if (index < params.length) {\n          var param = params[index];\n          var resultingParams = [];\n          if (param.restParam) {\n            // split the types of a rest parameter in two:\n            // one with only exact types, and one with exact types and conversions\n            var exactTypes = param.types.filter(isExactType);\n            if (exactTypes.length < param.types.length) {\n              resultingParams.push({\n                types: exactTypes,\n                name: '...' + exactTypes.map(function (t) {\n                  return t.name;\n                }).join('|'),\n                hasAny: exactTypes.some(function (t) {\n                  return t.isAny;\n                }),\n                hasConversion: false,\n                restParam: true\n              });\n            }\n            resultingParams.push(param);\n          } else {\n            // split all the types of a regular parameter into one type per param\n            resultingParams = param.types.map(function (type) {\n              return {\n                types: [type],\n                name: type.name,\n                hasAny: type.isAny,\n                hasConversion: type.conversion,\n                restParam: false\n              };\n            });\n          } // recurse over the groups with types\n\n          return flatMap(resultingParams, function (nextParam) {\n            return _splitParams(params, index + 1, paramsSoFar.concat([nextParam]));\n          });\n        } else {\n          // we've reached the end of the parameters.\n          return [paramsSoFar];\n        }\n      }\n      return _splitParams(params, 0, []);\n    }\n    /**\n     * Test whether two param lists represent conflicting signatures\n     * @param {Param[]} params1\n     * @param {Param[]} params2\n     * @return {boolean} Returns true when the signatures conflict, false otherwise.\n     */\n\n    function conflicting(params1, params2) {\n      var ii = Math.max(params1.length, params2.length);\n      for (var i = 0; i < ii; i++) {\n        var typeSet1 = getTypeSetAtIndex(params1, i);\n        var typeSet2 = getTypeSetAtIndex(params2, i);\n        var overlap = false;\n        var name = void 0;\n        var _iterator9 = _createForOfIteratorHelper(typeSet2),\n          _step9;\n        try {\n          for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n            name = _step9.value;\n            if (typeSet1.has(name)) {\n              overlap = true;\n              break;\n            }\n          }\n        } catch (err) {\n          _iterator9.e(err);\n        } finally {\n          _iterator9.f();\n        }\n        if (!overlap) {\n          return false;\n        }\n      }\n      var len1 = params1.length;\n      var len2 = params2.length;\n      var restParam1 = hasRestParam(params1);\n      var restParam2 = hasRestParam(params2);\n      return restParam1 ? restParam2 ? len1 === len2 : len2 >= len1 : restParam2 ? len1 >= len2 : len1 === len2;\n    }\n    /**\n     * Helper function for `resolveReferences` that returns a copy of\n     * functionList wihe any prior resolutions cleared out, in case we are\n     * recycling signatures from a prior typed function construction.\n     *\n     * @param {Array.<function|typed-reference>} functionList\n     * @return {Array.<function|typed-reference>}\n     */\n\n    function clearResolutions(functionList) {\n      return functionList.map(function (fn) {\n        if (isReferToSelf(fn)) {\n          return referToSelf(fn.referToSelf.callback);\n        }\n        if (isReferTo(fn)) {\n          return makeReferTo(fn.referTo.references, fn.referTo.callback);\n        }\n        return fn;\n      });\n    }\n    /**\n     * Take a list of references, a list of functions functionList, and a\n     * signatureMap indexing signatures into functionList, and return\n     * the list of resolutions, or a false-y value if they don't all\n     * resolve in a valid way (yet).\n     *\n     * @param {string[]} references\n     * @param {Array<function|typed-reference} functionList\n     * @param {Object.<string, integer>} signatureMap\n     * @return {function[] | false} resolutions\n     */\n\n    function collectResolutions(references, functionList, signatureMap) {\n      var resolvedReferences = [];\n      var reference;\n      var _iterator10 = _createForOfIteratorHelper(references),\n        _step10;\n      try {\n        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n          reference = _step10.value;\n          var resolution = signatureMap[reference];\n          if (typeof resolution !== 'number') {\n            throw new TypeError('No definition for referenced signature \"' + reference + '\"');\n          }\n          resolution = functionList[resolution];\n          if (typeof resolution !== 'function') {\n            return false;\n          }\n          resolvedReferences.push(resolution);\n        }\n      } catch (err) {\n        _iterator10.e(err);\n      } finally {\n        _iterator10.f();\n      }\n      return resolvedReferences;\n    }\n    /**\n     * Resolve any references in the functionList for the typed function\n     * itself. The signatureMap tells which index in the functionList a\n     * given signature should be mapped to (for use in resolving typed.referTo)\n     * and self provides the destions of a typed.referToSelf.\n     *\n     * @param {Array<function | typed-reference-object>} functionList\n     * @param {Object.<string, function>} signatureMap\n     * @param {function} self  The typed-function itself\n     * @return {Array<function>} The list of resolved functions\n     */\n\n    function resolveReferences(functionList, signatureMap, self) {\n      var resolvedFunctions = clearResolutions(functionList);\n      var isResolved = new Array(resolvedFunctions.length).fill(false);\n      var leftUnresolved = true;\n      while (leftUnresolved) {\n        leftUnresolved = false;\n        var nothingResolved = true;\n        for (var i = 0; i < resolvedFunctions.length; ++i) {\n          if (isResolved[i]) continue;\n          var fn = resolvedFunctions[i];\n          if (isReferToSelf(fn)) {\n            resolvedFunctions[i] = fn.referToSelf.callback(self); // Preserve reference in case signature is reused someday:\n\n            resolvedFunctions[i].referToSelf = fn.referToSelf;\n            isResolved[i] = true;\n            nothingResolved = false;\n          } else if (isReferTo(fn)) {\n            var resolvedReferences = collectResolutions(fn.referTo.references, resolvedFunctions, signatureMap);\n            if (resolvedReferences) {\n              resolvedFunctions[i] = fn.referTo.callback.apply(this, resolvedReferences); // Preserve reference in case signature is reused someday:\n\n              resolvedFunctions[i].referTo = fn.referTo;\n              isResolved[i] = true;\n              nothingResolved = false;\n            } else {\n              leftUnresolved = true;\n            }\n          }\n        }\n        if (nothingResolved && leftUnresolved) {\n          throw new SyntaxError('Circular reference detected in resolving typed.referTo');\n        }\n      }\n      return resolvedFunctions;\n    }\n    /**\n     * Validate whether any of the function bodies contains a self-reference\n     * usage like `this(...)` or `this.signatures`. This self-referencing is\n     * deprecated since typed-function v3. It has been replaced with\n     * the functions typed.referTo and typed.referToSelf.\n     * @param {Object.<string, function>} signaturesMap\n     */\n\n    function validateDeprecatedThis(signaturesMap) {\n      // TODO: remove this deprecation warning logic some day (it's introduced in v3)\n      // match occurrences like 'this(' and 'this.signatures'\n      var deprecatedThisRegex = /\\bthis(\\(|\\.signatures\\b)/;\n      Object.keys(signaturesMap).forEach(function (signature) {\n        var fn = signaturesMap[signature];\n        if (deprecatedThisRegex.test(fn.toString())) {\n          throw new SyntaxError('Using `this` to self-reference a function ' + 'is deprecated since typed-function@3. ' + 'Use typed.referTo and typed.referToSelf instead.');\n        }\n      });\n    }\n    /**\n     * Create a typed function\n     * @param {String} name               The name for the typed function\n     * @param {Object.<string, function>} rawSignaturesMap\n     *                                    An object with one or\n     *                                    multiple signatures as key, and the\n     *                                    function corresponding to the\n     *                                    signature as value.\n     * @return {function}  Returns the created typed function.\n     */\n\n    function createTypedFunction(name, rawSignaturesMap) {\n      typed.createCount++;\n      if (Object.keys(rawSignaturesMap).length === 0) {\n        throw new SyntaxError('No signatures provided');\n      }\n      if (typed.warnAgainstDeprecatedThis) {\n        validateDeprecatedThis(rawSignaturesMap);\n      } // Main processing loop for signatures\n\n      var parsedParams = [];\n      var originalFunctions = [];\n      var signaturesMap = {};\n      var preliminarySignatures = []; // may have duplicates from conversions\n\n      var signature;\n      var _loop3 = function _loop3() {\n          // A) Protect against polluted Object prototype:\n          if (!Object.prototype.hasOwnProperty.call(rawSignaturesMap, signature)) {\n            return 0; // continue\n          } // B) Parse the signature\n\n          var params = parseSignature(signature);\n          if (!params) return 0; // continue\n          // C) Check for conflicts\n\n          parsedParams.forEach(function (pp) {\n            if (conflicting(pp, params)) {\n              throw new TypeError('Conflicting signatures \"' + stringifyParams(pp) + '\" and \"' + stringifyParams(params) + '\".');\n            }\n          });\n          parsedParams.push(params); // D) Store the provided function and add conversions\n\n          var functionIndex = originalFunctions.length;\n          originalFunctions.push(rawSignaturesMap[signature]);\n          var conversionParams = params.map(expandParam); // E) Split the signatures and collect them up\n\n          var sp;\n          var _iterator11 = _createForOfIteratorHelper(splitParams(conversionParams)),\n            _step11;\n          try {\n            for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n              sp = _step11.value;\n              var spName = stringifyParams(sp);\n              preliminarySignatures.push({\n                params: sp,\n                name: spName,\n                fn: functionIndex\n              });\n              if (sp.every(function (p) {\n                return !p.hasConversion;\n              })) {\n                signaturesMap[spName] = functionIndex;\n              }\n            }\n          } catch (err) {\n            _iterator11.e(err);\n          } finally {\n            _iterator11.f();\n          }\n        },\n        _ret3;\n      for (signature in rawSignaturesMap) {\n        _ret3 = _loop3();\n        if (_ret3 === 0) continue;\n      }\n      preliminarySignatures.sort(compareSignatures); // Note the forward reference to theTypedFn\n\n      var resolvedFunctions = resolveReferences(originalFunctions, signaturesMap, theTypedFn); // Fill in the proper function for each signature\n\n      var s;\n      for (s in signaturesMap) {\n        if (Object.prototype.hasOwnProperty.call(signaturesMap, s)) {\n          signaturesMap[s] = resolvedFunctions[signaturesMap[s]];\n        }\n      }\n      var signatures = [];\n      var internalSignatureMap = new Map(); // benchmarks faster than object\n\n      for (var _i3 = 0, _preliminarySignature = preliminarySignatures; _i3 < _preliminarySignature.length; _i3++) {\n        s = _preliminarySignature[_i3];\n        // Note it's only safe to eliminate duplicates like this\n        // _after_ the signature sorting step above; otherwise we might\n        // remove the wrong one.\n        if (!internalSignatureMap.has(s.name)) {\n          s.fn = resolvedFunctions[s.fn];\n          signatures.push(s);\n          internalSignatureMap.set(s.name, s);\n        }\n      } // we create a highly optimized checks for the first couple of signatures with max 2 arguments\n\n      var ok0 = signatures[0] && signatures[0].params.length <= 2 && !hasRestParam(signatures[0].params);\n      var ok1 = signatures[1] && signatures[1].params.length <= 2 && !hasRestParam(signatures[1].params);\n      var ok2 = signatures[2] && signatures[2].params.length <= 2 && !hasRestParam(signatures[2].params);\n      var ok3 = signatures[3] && signatures[3].params.length <= 2 && !hasRestParam(signatures[3].params);\n      var ok4 = signatures[4] && signatures[4].params.length <= 2 && !hasRestParam(signatures[4].params);\n      var ok5 = signatures[5] && signatures[5].params.length <= 2 && !hasRestParam(signatures[5].params);\n      var allOk = ok0 && ok1 && ok2 && ok3 && ok4 && ok5; // compile the tests\n\n      for (var i = 0; i < signatures.length; ++i) {\n        signatures[i].test = compileTests(signatures[i].params);\n      }\n      var test00 = ok0 ? compileTest(signatures[0].params[0]) : notOk;\n      var test10 = ok1 ? compileTest(signatures[1].params[0]) : notOk;\n      var test20 = ok2 ? compileTest(signatures[2].params[0]) : notOk;\n      var test30 = ok3 ? compileTest(signatures[3].params[0]) : notOk;\n      var test40 = ok4 ? compileTest(signatures[4].params[0]) : notOk;\n      var test50 = ok5 ? compileTest(signatures[5].params[0]) : notOk;\n      var test01 = ok0 ? compileTest(signatures[0].params[1]) : notOk;\n      var test11 = ok1 ? compileTest(signatures[1].params[1]) : notOk;\n      var test21 = ok2 ? compileTest(signatures[2].params[1]) : notOk;\n      var test31 = ok3 ? compileTest(signatures[3].params[1]) : notOk;\n      var test41 = ok4 ? compileTest(signatures[4].params[1]) : notOk;\n      var test51 = ok5 ? compileTest(signatures[5].params[1]) : notOk; // compile the functions\n\n      for (var _i4 = 0; _i4 < signatures.length; ++_i4) {\n        signatures[_i4].implementation = compileArgsPreprocessing(signatures[_i4].params, signatures[_i4].fn);\n      }\n      var fn0 = ok0 ? signatures[0].implementation : undef;\n      var fn1 = ok1 ? signatures[1].implementation : undef;\n      var fn2 = ok2 ? signatures[2].implementation : undef;\n      var fn3 = ok3 ? signatures[3].implementation : undef;\n      var fn4 = ok4 ? signatures[4].implementation : undef;\n      var fn5 = ok5 ? signatures[5].implementation : undef;\n      var len0 = ok0 ? signatures[0].params.length : -1;\n      var len1 = ok1 ? signatures[1].params.length : -1;\n      var len2 = ok2 ? signatures[2].params.length : -1;\n      var len3 = ok3 ? signatures[3].params.length : -1;\n      var len4 = ok4 ? signatures[4].params.length : -1;\n      var len5 = ok5 ? signatures[5].params.length : -1; // simple and generic, but also slow\n\n      var iStart = allOk ? 6 : 0;\n      var iEnd = signatures.length; // de-reference ahead for execution speed:\n\n      var tests = signatures.map(function (s) {\n        return s.test;\n      });\n      var fns = signatures.map(function (s) {\n        return s.implementation;\n      });\n      var generic = function generic() {\n        for (var _i5 = iStart; _i5 < iEnd; _i5++) {\n          if (tests[_i5](arguments)) {\n            return fns[_i5].apply(this, arguments);\n          }\n        }\n        return typed.onMismatch(name, arguments, signatures);\n      }; // create the typed function\n      // fast, specialized version. Falls back to the slower, generic one if needed\n\n      function theTypedFn(arg0, arg1) {\n        if (arguments.length === len0 && test00(arg0) && test01(arg1)) {\n          return fn0.apply(this, arguments);\n        }\n        if (arguments.length === len1 && test10(arg0) && test11(arg1)) {\n          return fn1.apply(this, arguments);\n        }\n        if (arguments.length === len2 && test20(arg0) && test21(arg1)) {\n          return fn2.apply(this, arguments);\n        }\n        if (arguments.length === len3 && test30(arg0) && test31(arg1)) {\n          return fn3.apply(this, arguments);\n        }\n        if (arguments.length === len4 && test40(arg0) && test41(arg1)) {\n          return fn4.apply(this, arguments);\n        }\n        if (arguments.length === len5 && test50(arg0) && test51(arg1)) {\n          return fn5.apply(this, arguments);\n        }\n        return generic.apply(this, arguments);\n      } // attach name the typed function\n\n      try {\n        Object.defineProperty(theTypedFn, 'name', {\n          value: name\n        });\n      } catch (err) {// old browsers do not support Object.defineProperty and some don't support setting the name property\n        // the function name is not essential for the functioning, it's mostly useful for debugging,\n        // so it's fine to have unnamed functions.\n      } // attach signatures to the function.\n      // This property is close to the original collection of signatures\n      // used to create the typed-function, just with unions split:\n\n      theTypedFn.signatures = signaturesMap; // Store internal data for functions like resolve, find, etc.\n      // Also serves as the flag that this is a typed-function\n\n      theTypedFn._typedFunctionData = {\n        signatures: signatures,\n        signatureMap: internalSignatureMap\n      };\n      return theTypedFn;\n    }\n    /**\n     * Action to take on mismatch\n     * @param {string} name      Name of function that was attempted to be called\n     * @param {Array} args       Actual arguments to the call\n     * @param {Array} signatures Known signatures of the named typed-function\n     */\n\n    function _onMismatch(name, args, signatures) {\n      throw createError(name, args, signatures);\n    }\n    /**\n     * Return all but the last items of an array or function Arguments\n     * @param {Array | Arguments} arr\n     * @return {Array}\n     */\n\n    function initial(arr) {\n      return slice(arr, 0, arr.length - 1);\n    }\n    /**\n     * return the last item of an array or function Arguments\n     * @param {Array | Arguments} arr\n     * @return {*}\n     */\n\n    function last(arr) {\n      return arr[arr.length - 1];\n    }\n    /**\n     * Slice an array or function Arguments\n     * @param {Array | Arguments | IArguments} arr\n     * @param {number} start\n     * @param {number} [end]\n     * @return {Array}\n     */\n\n    function slice(arr, start, end) {\n      return Array.prototype.slice.call(arr, start, end);\n    }\n    /**\n     * Return the first item from an array for which test(arr[i]) returns true\n     * @param {Array} arr\n     * @param {function} test\n     * @return {* | undefined} Returns the first matching item\n     *                         or undefined when there is no match\n     */\n\n    function findInArray(arr, test) {\n      for (var i = 0; i < arr.length; i++) {\n        if (test(arr[i])) {\n          return arr[i];\n        }\n      }\n      return undefined;\n    }\n    /**\n     * Flat map the result invoking a callback for every item in an array.\n     * https://gist.github.com/samgiles/762ee337dff48623e729\n     * @param {Array} arr\n     * @param {function} callback\n     * @return {Array}\n     */\n\n    function flatMap(arr, callback) {\n      return Array.prototype.concat.apply([], arr.map(callback));\n    }\n    /**\n     * Create a reference callback to one or multiple signatures\n     *\n     * Syntax:\n     *\n     *     typed.referTo(signature1, signature2, ..., function callback(fn1, fn2, ...) {\n     *       // ...\n     *     })\n     *\n     * @returns {{referTo: {references: string[], callback}}}\n     */\n\n    function referTo() {\n      var references = initial(arguments).map(function (s) {\n        return stringifyParams(parseSignature(s));\n      });\n      var callback = last(arguments);\n      if (typeof callback !== 'function') {\n        throw new TypeError('Callback function expected as last argument');\n      }\n      return makeReferTo(references, callback);\n    }\n    function makeReferTo(references, callback) {\n      return {\n        referTo: {\n          references: references,\n          callback: callback\n        }\n      };\n    }\n    /**\n     * Create a reference callback to the typed-function itself\n     *\n     * @param {(self: function) => function} callback\n     * @returns {{referToSelf: { callback: function }}}\n     */\n\n    function referToSelf(callback) {\n      if (typeof callback !== 'function') {\n        throw new TypeError('Callback function expected as first argument');\n      }\n      return {\n        referToSelf: {\n          callback: callback\n        }\n      };\n    }\n    /**\n     * Test whether something is a referTo object, holding a list with reference\n     * signatures and a callback.\n     *\n     * @param {Object | function} objectOrFn\n     * @returns {boolean}\n     */\n\n    function isReferTo(objectOrFn) {\n      return objectOrFn && typeof objectOrFn.referTo === 'object' && Array.isArray(objectOrFn.referTo.references) && typeof objectOrFn.referTo.callback === 'function';\n    }\n    /**\n     * Test whether something is a referToSelf object, holding a callback where\n     * to pass `self`.\n     *\n     * @param {Object | function} objectOrFn\n     * @returns {boolean}\n     */\n\n    function isReferToSelf(objectOrFn) {\n      return objectOrFn && typeof objectOrFn.referToSelf === 'object' && typeof objectOrFn.referToSelf.callback === 'function';\n    }\n    /**\n     * Check if name is (A) new, (B) a match, or (C) a mismatch; and throw\n     * an error in case (C).\n     *\n     * @param { string | undefined } nameSoFar\n     * @param { string | undefined } newName\n     * @returns { string } updated name\n     */\n\n    function checkName(nameSoFar, newName) {\n      if (!nameSoFar) {\n        return newName;\n      }\n      if (newName && newName !== nameSoFar) {\n        var err = new Error('Function names do not match (expected: ' + nameSoFar + ', actual: ' + newName + ')');\n        err.data = {\n          actual: newName,\n          expected: nameSoFar\n        };\n        throw err;\n      }\n      return nameSoFar;\n    }\n    /**\n     * Retrieve the implied name from an object with signature keys\n     * and function values, checking whether all value names match\n     *\n     * @param { {string: function} } obj\n     */\n\n    function getObjectName(obj) {\n      var name;\n      for (var key in obj) {\n        // Only pay attention to own properties, and only if their values\n        // are typed functions or functions with a signature property\n        if (Object.prototype.hasOwnProperty.call(obj, key) && (isTypedFunction(obj[key]) || typeof obj[key].signature === 'string')) {\n          name = checkName(name, obj[key].name);\n        }\n      }\n      return name;\n    }\n    /**\n     * Copy all of the signatures from the second argument into the first,\n     * which is modified by side effect, checking for conflicts\n     *\n     * @param {Object.<string, function|typed-reference>} dest\n     * @param {Object.<string, function|typed-reference>} source\n     */\n\n    function mergeSignatures(dest, source) {\n      var key;\n      for (key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          if (key in dest) {\n            if (source[key] !== dest[key]) {\n              var err = new Error('Signature \"' + key + '\" is defined twice');\n              err.data = {\n                signature: key,\n                sourceFunction: source[key],\n                destFunction: dest[key]\n              };\n              throw err;\n            } // else: both signatures point to the same function, that's fine\n          }\n\n          dest[key] = source[key];\n        }\n      }\n    }\n    var saveTyped = typed;\n    /**\n     * Originally the main function was a typed function itself, but then\n     * it might not be able to generate error messages if the client\n     * replaced the type system with different names.\n     *\n     * Main entry: typed([name], functions/objects with signatures...)\n     *\n     * Assembles and returns a new typed-function from the given items\n     * that provide signatures and implementations, each of which may be\n     * * a plain object mapping (string) signatures to implementing functions,\n     * * a previously constructed typed function, or\n     * * any other single function with a string-valued property `signature`.\n      * The name of the resulting typed-function will be given by the\n     * string-valued name argument if present, or if not, by the name\n     * of any of the arguments that have one, as long as any that do are\n     * consistent with each other. If no name is specified, the name will be\n     * an empty string.\n     *\n     * @param {string} maybeName [optional]\n     * @param {(function|object)[]} signature providers\n     * @returns {typed-function}\n     */\n\n    typed = function typed(maybeName) {\n      var named = typeof maybeName === 'string';\n      var start = named ? 1 : 0;\n      var name = named ? maybeName : '';\n      var allSignatures = {};\n      for (var i = start; i < arguments.length; ++i) {\n        var item = arguments[i];\n        var theseSignatures = {};\n        var thisName = void 0;\n        if (typeof item === 'function') {\n          thisName = item.name;\n          if (typeof item.signature === 'string') {\n            // Case 1: Ordinary function with a string 'signature' property\n            theseSignatures[item.signature] = item;\n          } else if (isTypedFunction(item)) {\n            // Case 2: Existing typed function\n            theseSignatures = item.signatures;\n          }\n        } else if (isPlainObject(item)) {\n          // Case 3: Plain object, assume keys = signatures, values = functions\n          theseSignatures = item;\n          if (!named) {\n            thisName = getObjectName(item);\n          }\n        }\n        if (Object.keys(theseSignatures).length === 0) {\n          var err = new TypeError('Argument to \\'typed\\' at index ' + i + ' is not a (typed) function, ' + 'nor an object with signatures as keys and functions as values.');\n          err.data = {\n            index: i,\n            argument: item\n          };\n          throw err;\n        }\n        if (!named) {\n          name = checkName(name, thisName);\n        }\n        mergeSignatures(allSignatures, theseSignatures);\n      }\n      return createTypedFunction(name || '', allSignatures);\n    };\n    typed.create = create;\n    typed.createCount = saveTyped.createCount;\n    typed.onMismatch = _onMismatch;\n    typed.throwMismatchError = _onMismatch;\n    typed.createError = createError;\n    typed.clear = clear;\n    typed.clearConversions = clearConversions;\n    typed.addTypes = addTypes;\n    typed._findType = findType; // For unit testing only\n\n    typed.referTo = referTo;\n    typed.referToSelf = referToSelf;\n    typed.convert = convert;\n    typed.findSignature = findSignature;\n    typed.find = find;\n    typed.isTypedFunction = isTypedFunction;\n    typed.warnAgainstDeprecatedThis = true;\n    /**\n     * add a type (convenience wrapper for typed.addTypes)\n     * @param {{name: string, test: function}} type\n     * @param {boolean} [beforeObjectTest=true]\n     *                          If true, the new test will be inserted before\n     *                          the test with name 'Object' (if any), since\n     *                          tests for Object match Array and classes too.\n     */\n\n    typed.addType = function (type, beforeObjectTest) {\n      var before = 'any';\n      if (beforeObjectTest !== false && typeMap.has('Object')) {\n        before = 'Object';\n      }\n      typed.addTypes([type], before);\n    };\n    /**\n     * Verify that the ConversionDef conversion has a valid format.\n     *\n     * @param {conversionDef} conversion\n     * @return {void}\n     * @throws {TypeError|SyntaxError}\n     */\n\n    function _validateConversion(conversion) {\n      if (!conversion || typeof conversion.from !== 'string' || typeof conversion.to !== 'string' || typeof conversion.convert !== 'function') {\n        throw new TypeError('Object with properties {from: string, to: string, convert: function} expected');\n      }\n      if (conversion.to === conversion.from) {\n        throw new SyntaxError('Illegal to define conversion from \"' + conversion.from + '\" to itself.');\n      }\n    }\n    /**\n     * Add a conversion\n     *\n     * @param {ConversionDef} conversion\n     * @returns {void}\n     * @throws {TypeError}\n     */\n\n    typed.addConversion = function (conversion) {\n      _validateConversion(conversion);\n      var to = findType(conversion.to);\n      if (to.conversionsTo.every(function (other) {\n        return other.from !== conversion.from;\n      })) {\n        to.conversionsTo.push({\n          from: conversion.from,\n          convert: conversion.convert,\n          index: nConversions++\n        });\n      } else {\n        throw new Error('There is already a conversion from \"' + conversion.from + '\" to \"' + to.name + '\"');\n      }\n    };\n    /**\n     * Convenience wrapper to call addConversion on each conversion in a list.\n     *\n     @param {ConversionDef[]} conversions\n     @returns {void}\n     @throws {TypeError}\n     */\n\n    typed.addConversions = function (conversions) {\n      conversions.forEach(typed.addConversion);\n    };\n    /**\n     * Remove the specified conversion. The format is the same as for\n     * addConversion, and the convert function must match or an error\n     * is thrown.\n     *\n     * @param {{from: string, to: string, convert: function}} conversion\n     * @returns {void}\n     * @throws {TypeError|SyntaxError|Error}\n     */\n\n    typed.removeConversion = function (conversion) {\n      _validateConversion(conversion);\n      var to = findType(conversion.to);\n      var existingConversion = findInArray(to.conversionsTo, function (c) {\n        return c.from === conversion.from;\n      });\n      if (!existingConversion) {\n        throw new Error('Attempt to remove nonexistent conversion from ' + conversion.from + ' to ' + conversion.to);\n      }\n      if (existingConversion.convert !== conversion.convert) {\n        throw new Error('Conversion to remove does not match existing conversion');\n      }\n      var index = to.conversionsTo.indexOf(existingConversion);\n      to.conversionsTo.splice(index, 1);\n    };\n    /**\n     * Produce the specific signature that a typed function\n     * will execute on the given arguments. Here, a \"signature\" is an\n     * object with properties 'params', 'test', 'fn', and 'implementation'.\n     * This last property is a function that converts params as necessary\n     * and then calls 'fn'. Returns null if there is no matching signature.\n     * @param {typed-function} tf\n     * @param {any[]} argList\n     * @returns {{params: string, test: function, fn: function, implementation: function}}\n     */\n\n    typed.resolve = function (tf, argList) {\n      if (!isTypedFunction(tf)) {\n        throw new TypeError(NOT_TYPED_FUNCTION);\n      }\n      var sigs = tf._typedFunctionData.signatures;\n      for (var i = 0; i < sigs.length; ++i) {\n        if (sigs[i].test(argList)) {\n          return sigs[i];\n        }\n      }\n      return null;\n    };\n    return typed;\n  }\n  var typedFunction = create();\n  return typedFunction;\n});","map":{"version":3,"names":["ok","notOk","undef","undefined","NOT_TYPED_FUNCTION","create","isPlainObject","x","constructor","Object","_types","name","test","Array","isArray","Date","RegExp","anyType","isAny","typeMap","typeList","nConversions","typed","createCount","findType","typeName","type","get","message","toLowerCase","otherName","_iterator","_createForOfIteratorHelper","_step","s","n","done","value","err","e","f","TypeError","addTypes","types","beforeSpec","arguments","length","beforeIndex","index","newTypes","i","has","push","set","conversionsTo","affectedTypes","slice","concat","clear","Map","clearConversions","_iterator2","_step2","findTypeNames","matches","filter","isTypedFunction","entity","findSignature","fn","signature","options","exact","stringSignature","join","params","parseSignature","canonicalSignature","stringifyParams","signatures","match","_typedFunctionData","signatureMap","nParams","remainingSignatures","want","filteredSignatures","possibility","_iterator3","_step3","_loop","have","getParamAtIndex","restParam","hasAny","haveTypes","paramTypeSet","some","wtype","_ret","candidate","_iterator4","_step4","find","implementation","convert","conversions","Error","fromType","from","separator","map","p","parseParam","param","indexOf","typeDefs","split","trim","paramName","exactTypes","typeIndex","conversion","conversionIndex","hasConversion","expandParam","typeNames","t","matchingConversions","availableConversions","newName","convertibleTypes","typeSet","Set","forEach","add","rawSignature","rawParams","parsedParam","SyntaxError","hasRestParam","last","compileTest","test0","test1","or","tests","compileTests","initial","varIndex","lastTest","testRestParam","args","testArgs","getTypeSetAtIndex","isExactType","mergeExpectedParams","paramSet","_iterator5","_step5","createError","expected","_name","matchingSignatures","_loop2","nextMatchingDefs","actualTypes","data","category","actual","v","_ret2","lengths","Infinity","Math","min","apply","maxLength","max","expectedLength","argTypes","getLowestTypeIndex","getLowestConversionIndex","compareParams","param1","param2","typeDiff","convDiff","compareSignatures","signature1","signature2","pars1","pars2","last1","last2","hasRest1","hasRest2","any1","conv1","par","_iterator6","_step6","any2","conv2","_iterator7","_step7","lengthCriterion","comparisons","tc","thisComparison","c","_i2","_comparisons","sort","t1","t2","knownTypes","newMatch","_iterator8","_step8","compileArgsPreprocessing","fnConvert","compiledConversions","compileArgConversion","convertArgs","fnPreprocess","offset","preprocessRestParams","conversion0","conversion1","convertArg","arg","splitParams","_splitParams","paramsSoFar","resultingParams","flatMap","nextParam","conflicting","params1","params2","ii","typeSet1","typeSet2","overlap","_iterator9","_step9","len1","len2","restParam1","restParam2","clearResolutions","functionList","isReferToSelf","referToSelf","callback","isReferTo","makeReferTo","referTo","references","collectResolutions","resolvedReferences","reference","_iterator10","_step10","resolution","resolveReferences","self","resolvedFunctions","isResolved","fill","leftUnresolved","nothingResolved","validateDeprecatedThis","signaturesMap","deprecatedThisRegex","keys","toString","createTypedFunction","rawSignaturesMap","warnAgainstDeprecatedThis","parsedParams","originalFunctions","preliminarySignatures","_loop3","prototype","hasOwnProperty","call","pp","functionIndex","conversionParams","sp","_iterator11","_step11","spName","every","_ret3","theTypedFn","internalSignatureMap","_i3","_preliminarySignature","ok0","ok1","ok2","ok3","ok4","ok5","allOk","test00","test10","test20","test30","test40","test50","test01","test11","test21","test31","test41","test51","fn0","fn1","fn2","fn3","fn4","fn5","len0","len3","len4","len5","iStart","iEnd","fns","generic","onMismatch","arg0","arg1","defineProperty","_onMismatch","arr","start","end","findInArray","objectOrFn","checkName","nameSoFar","getObjectName","obj","key","mergeSignatures","dest","source","sourceFunction","destFunction","saveTyped","maybeName","named","allSignatures","item","theseSignatures","thisName","argument","throwMismatchError","_findType","addType","beforeObjectTest","before","_validateConversion","to","addConversion","other","addConversions","removeConversion","existingConversion","splice","resolve","tf","argList","sigs","typedFunction"],"sources":["C:\\Users\\micha\\Documents\\mechenko_main\\PEDAGOGY\\fa23\\CS4530\\project\\team111-project\\implementation\\node_modules\\typed-function\\lib\\esm\\typed-function.mjs"],"sourcesContent":["function ok() {\n  return true;\n}\n\nfunction notOk() {\n  return false;\n}\n\nfunction undef() {\n  return undefined;\n}\n\nconst NOT_TYPED_FUNCTION = 'Argument is not a typed-function.';\n/**\n * @typedef {{\n *   params: Param[],\n *   fn: function,\n *   test: function,\n *   implementation: function\n * }} Signature\n *\n * @typedef {{\n *   types: Type[],\n *   hasAny: boolean,\n *   hasConversion: boolean,\n *   restParam: boolean\n * }} Param\n *\n * @typedef {{\n *   name: string,\n *   typeIndex: number,\n *   test: function,\n *   isAny: boolean,\n *   conversion?: ConversionDef,\n *   conversionIndex: number,\n * }} Type\n *\n * @typedef {{\n *   from: string,\n *   to: string,\n *   convert: function (*) : *\n * }} ConversionDef\n *\n * @typedef {{\n *   name: string,\n *   test: function(*) : boolean,\n *   isAny?: boolean\n * }} TypeDef\n */\n\n/**\n * @returns {() => function}\n */\n\nfunction create() {\n  // data type tests\n\n  /**\n   * Returns true if the argument is a non-null \"plain\" object\n   */\n  function isPlainObject(x) {\n    return typeof x === 'object' && x !== null && x.constructor === Object;\n  }\n\n  const _types = [{\n    name: 'number',\n    test: function (x) {\n      return typeof x === 'number';\n    }\n  }, {\n    name: 'string',\n    test: function (x) {\n      return typeof x === 'string';\n    }\n  }, {\n    name: 'boolean',\n    test: function (x) {\n      return typeof x === 'boolean';\n    }\n  }, {\n    name: 'Function',\n    test: function (x) {\n      return typeof x === 'function';\n    }\n  }, {\n    name: 'Array',\n    test: Array.isArray\n  }, {\n    name: 'Date',\n    test: function (x) {\n      return x instanceof Date;\n    }\n  }, {\n    name: 'RegExp',\n    test: function (x) {\n      return x instanceof RegExp;\n    }\n  }, {\n    name: 'Object',\n    test: isPlainObject\n  }, {\n    name: 'null',\n    test: function (x) {\n      return x === null;\n    }\n  }, {\n    name: 'undefined',\n    test: function (x) {\n      return x === undefined;\n    }\n  }];\n  const anyType = {\n    name: 'any',\n    test: ok,\n    isAny: true\n  }; // Data structures to track the types. As these are local variables in\n  // create(), each typed universe will get its own copy, but the variables\n  // will only be accessible through the (closures of the) functions supplied\n  // as properties of the typed object, not directly.\n  // These will be initialized in clear() below\n\n  let typeMap; // primary store of all types\n\n  let typeList; // Array of just type names, for the sake of ordering\n  // And similar data structures for the type conversions:\n\n  let nConversions = 0; // the actual conversions are stored on a property of the destination types\n  // This is a temporary object, will be replaced with a function at the end\n\n  let typed = {\n    createCount: 0\n  };\n  /**\n   * Takes a type name and returns the corresponding official type object\n   * for that type.\n   *\n   * @param {string} typeName\n   * @returns {TypeDef} type\n   */\n\n  function findType(typeName) {\n    const type = typeMap.get(typeName);\n\n    if (type) {\n      return type;\n    } // Remainder is error handling\n\n\n    let message = 'Unknown type \"' + typeName + '\"';\n    const name = typeName.toLowerCase();\n    let otherName;\n\n    for (otherName of typeList) {\n      if (otherName.toLowerCase() === name) {\n        message += '. Did you mean \"' + otherName + '\" ?';\n        break;\n      }\n    }\n\n    throw new TypeError(message);\n  }\n  /**\n   * Adds an array `types` of type definitions to this typed instance.\n   * Each type definition should be an object with properties:\n   * 'name' - a string giving the name of the type; 'test' - function\n   * returning a boolean that tests membership in the type; and optionally\n   * 'isAny' - true only for the 'any' type.\n   *\n   * The second optional argument, `before`, gives the name of a type that\n   * these types should be added before. The new types are added in the\n   * order specified.\n   * @param {TypeDef[]} types\n   * @param {string | boolean} [beforeSpec='any'] before\n   */\n\n\n  function addTypes(types) {\n    let beforeSpec = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'any';\n    const beforeIndex = beforeSpec ? findType(beforeSpec).index : typeList.length;\n    const newTypes = [];\n\n    for (let i = 0; i < types.length; ++i) {\n      if (!types[i] || typeof types[i].name !== 'string' || typeof types[i].test !== 'function') {\n        throw new TypeError('Object with properties {name: string, test: function} expected');\n      }\n\n      const typeName = types[i].name;\n\n      if (typeMap.has(typeName)) {\n        throw new TypeError('Duplicate type name \"' + typeName + '\"');\n      }\n\n      newTypes.push(typeName);\n      typeMap.set(typeName, {\n        name: typeName,\n        test: types[i].test,\n        isAny: types[i].isAny,\n        index: beforeIndex + i,\n        conversionsTo: [] // Newly added type can't have any conversions to it\n\n      });\n    } // update the typeList\n\n\n    const affectedTypes = typeList.slice(beforeIndex);\n    typeList = typeList.slice(0, beforeIndex).concat(newTypes).concat(affectedTypes); // Fix the indices\n\n    for (let i = beforeIndex + newTypes.length; i < typeList.length; ++i) {\n      typeMap.get(typeList[i]).index = i;\n    }\n  }\n  /**\n   * Removes all types and conversions from this typed instance.\n   * May cause previously constructed typed-functions to throw\n   * strange errors when they are called with types that do not\n   * match any of their signatures.\n   */\n\n\n  function clear() {\n    typeMap = new Map();\n    typeList = [];\n    nConversions = 0;\n    addTypes([anyType], false);\n  } // initialize the types to the default list\n\n\n  clear();\n  addTypes(_types);\n  /**\n   * Removes all conversions, leaving the types alone.\n   */\n\n  function clearConversions() {\n    let typeName;\n\n    for (typeName of typeList) {\n      typeMap.get(typeName).conversionsTo = [];\n    }\n\n    nConversions = 0;\n  }\n  /**\n   * Find the type names that match a value.\n   * @param {*} value\n   * @return {string[]} Array of names of types for which\n   *                  the type test matches the value.\n   */\n\n\n  function findTypeNames(value) {\n    const matches = typeList.filter(name => {\n      const type = typeMap.get(name);\n      return !type.isAny && type.test(value);\n    });\n\n    if (matches.length) {\n      return matches;\n    }\n\n    return ['any'];\n  }\n  /**\n   * Check if an entity is a typed function created by any instance\n   * @param {any} entity\n   * @returns {boolean}\n   */\n\n\n  function isTypedFunction(entity) {\n    return entity && typeof entity === 'function' && '_typedFunctionData' in entity;\n  }\n  /**\n   * Find a specific signature from a (composed) typed function, for example:\n   *\n   *   typed.findSignature(fn, ['number', 'string'])\n   *   typed.findSignature(fn, 'number, string')\n   *   typed.findSignature(fn, 'number,string', {exact: true})\n   *\n   * This function findSignature will by default return the best match to\n   * the given signature, possibly employing type conversions.\n   *\n   * The (optional) third argument is a plain object giving options\n   * controlling the signature search. Currently the only implemented\n   * option is `exact`: if specified as true (default is false), only\n   * exact matches will be returned (i.e. signatures for which `fn` was\n   * directly defined). Note that a (possibly different) type matching\n   * `any`, or one or more instances of TYPE matching `...TYPE` are\n   * considered exact matches in this regard, as no conversions are used.\n   *\n   * This function returns a \"signature\" object, as does `typed.resolve()`,\n   * which is a plain object with four keys: `params` (the array of parameters\n   * for this signature), `fn` (the originally supplied function for this\n   * signature), `test` (a generated function that determines if an argument\n   * list matches this signature, and `implementation` (the function to call\n   * on a matching argument list, that performs conversions if necessary and\n   * then calls the originally supplied function).\n   *\n   * @param {Function} fn                   A typed-function\n   * @param {string | string[]} signature\n   *     Signature to be found, can be an array or a comma separated string.\n   * @param {object} options  Controls the signature search as documented\n   * @return {{ params: Param[], fn: function, test: function, implementation: function }}\n   *     Returns the matching signature, or throws an error when no signature\n   *     is found.\n   */\n\n\n  function findSignature(fn, signature, options) {\n    if (!isTypedFunction(fn)) {\n      throw new TypeError(NOT_TYPED_FUNCTION);\n    } // Canonicalize input\n\n\n    const exact = options && options.exact;\n    const stringSignature = Array.isArray(signature) ? signature.join(',') : signature;\n    const params = parseSignature(stringSignature);\n    const canonicalSignature = stringifyParams(params); // First hope we get lucky and exactly match a signature\n\n    if (!exact || canonicalSignature in fn.signatures) {\n      // OK, we can check the internal signatures\n      const match = fn._typedFunctionData.signatureMap.get(canonicalSignature);\n\n      if (match) {\n        return match;\n      }\n    } // Oh well, we did not; so we have to go back and check the parameters\n    // one by one, in order to catch things like `any` and rest params.\n    // Note here we can assume there is at least one parameter, because\n    // the empty signature would have matched successfully above.\n\n\n    const nParams = params.length;\n    let remainingSignatures;\n\n    if (exact) {\n      remainingSignatures = [];\n      let name;\n\n      for (name in fn.signatures) {\n        remainingSignatures.push(fn._typedFunctionData.signatureMap.get(name));\n      }\n    } else {\n      remainingSignatures = fn._typedFunctionData.signatures;\n    }\n\n    for (let i = 0; i < nParams; ++i) {\n      const want = params[i];\n      const filteredSignatures = [];\n      let possibility;\n\n      for (possibility of remainingSignatures) {\n        const have = getParamAtIndex(possibility.params, i);\n\n        if (!have || want.restParam && !have.restParam) {\n          continue;\n        }\n\n        if (!have.hasAny) {\n          // have to check all of the wanted types are available\n          const haveTypes = paramTypeSet(have);\n\n          if (want.types.some(wtype => !haveTypes.has(wtype.name))) {\n            continue;\n          }\n        } // OK, this looks good\n\n\n        filteredSignatures.push(possibility);\n      }\n\n      remainingSignatures = filteredSignatures;\n      if (remainingSignatures.length === 0) break;\n    } // Return the first remaining signature that was totally matched:\n\n\n    let candidate;\n\n    for (candidate of remainingSignatures) {\n      if (candidate.params.length <= nParams) {\n        return candidate;\n      }\n    }\n\n    throw new TypeError('Signature not found (signature: ' + (fn.name || 'unnamed') + '(' + stringifyParams(params, ', ') + '))');\n  }\n  /**\n   * Find the proper function to call for a specific signature from\n   * a (composed) typed function, for example:\n   *\n   *   typed.find(fn, ['number', 'string'])\n   *   typed.find(fn, 'number, string')\n   *   typed.find(fn, 'number,string', {exact: true})\n   *\n   * This function find will by default return the best match to\n   * the given signature, possibly employing type conversions (and returning\n   * a function that will perform those conversions as needed). The\n   * (optional) third argument is a plain object giving options contolling\n   * the signature search. Currently only the option `exact` is implemented,\n   * which defaults to \"false\". If `exact` is specified as true, then only\n   * exact matches will be returned (i.e. signatures for which `fn` was\n   * directly defined). Uses of `any` and `...TYPE` are considered exact if\n   * no conversions are necessary to apply the corresponding function.\n   *\n   * @param {Function} fn                   A typed-function\n   * @param {string | string[]} signature\n   *     Signature to be found, can be an array or a comma separated string.\n   * @param {object} options  Controls the signature match as documented\n   * @return {function}\n   *     Returns the function to call for the given signature, or throws an\n   *     error if no match is found.\n   */\n\n\n  function find(fn, signature, options) {\n    return findSignature(fn, signature, options).implementation;\n  }\n  /**\n   * Convert a given value to another data type, specified by type name.\n   *\n   * @param {*} value\n   * @param {string} typeName\n   */\n\n\n  function convert(value, typeName) {\n    // check conversion is needed\n    const type = findType(typeName);\n\n    if (type.test(value)) {\n      return value;\n    }\n\n    const conversions = type.conversionsTo;\n\n    if (conversions.length === 0) {\n      throw new Error('There are no conversions to ' + typeName + ' defined.');\n    }\n\n    for (let i = 0; i < conversions.length; i++) {\n      const fromType = findType(conversions[i].from);\n\n      if (fromType.test(value)) {\n        return conversions[i].convert(value);\n      }\n    }\n\n    throw new Error('Cannot convert ' + value + ' to ' + typeName);\n  }\n  /**\n   * Stringify parameters in a normalized way\n   * @param {Param[]} params\n   * @param {string} [','] separator\n   * @return {string}\n   */\n\n\n  function stringifyParams(params) {\n    let separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ',';\n    return params.map(p => p.name).join(separator);\n  }\n  /**\n   * Parse a parameter, like \"...number | boolean\"\n   * @param {string} param\n   * @return {Param} param\n   */\n\n\n  function parseParam(param) {\n    const restParam = param.indexOf('...') === 0;\n    const types = !restParam ? param : param.length > 3 ? param.slice(3) : 'any';\n    const typeDefs = types.split('|').map(s => findType(s.trim()));\n    let hasAny = false;\n    let paramName = restParam ? '...' : '';\n    const exactTypes = typeDefs.map(function (type) {\n      hasAny = type.isAny || hasAny;\n      paramName += type.name + '|';\n      return {\n        name: type.name,\n        typeIndex: type.index,\n        test: type.test,\n        isAny: type.isAny,\n        conversion: null,\n        conversionIndex: -1\n      };\n    });\n    return {\n      types: exactTypes,\n      name: paramName.slice(0, -1),\n      // remove trailing '|' from above\n      hasAny,\n      hasConversion: false,\n      restParam\n    };\n  }\n  /**\n   * Expands a parsed parameter with the types available from currently\n   * defined conversions.\n   * @param {Param} param\n   * @return {Param} param\n   */\n\n\n  function expandParam(param) {\n    const typeNames = param.types.map(t => t.name);\n    const matchingConversions = availableConversions(typeNames);\n    let hasAny = param.hasAny;\n    let newName = param.name;\n    const convertibleTypes = matchingConversions.map(function (conversion) {\n      const type = findType(conversion.from);\n      hasAny = type.isAny || hasAny;\n      newName += '|' + conversion.from;\n      return {\n        name: conversion.from,\n        typeIndex: type.index,\n        test: type.test,\n        isAny: type.isAny,\n        conversion,\n        conversionIndex: conversion.index\n      };\n    });\n    return {\n      types: param.types.concat(convertibleTypes),\n      name: newName,\n      hasAny,\n      hasConversion: convertibleTypes.length > 0,\n      restParam: param.restParam\n    };\n  }\n  /**\n   * Return the set of type names in a parameter.\n   * Caches the result for efficiency\n   *\n   * @param {Param} param\n   * @return {Set<string>} typenames\n   */\n\n\n  function paramTypeSet(param) {\n    if (!param.typeSet) {\n      param.typeSet = new Set();\n      param.types.forEach(type => param.typeSet.add(type.name));\n    }\n\n    return param.typeSet;\n  }\n  /**\n   * Parse a signature with comma separated parameters,\n   * like \"number | boolean, ...string\"\n   *\n   * @param {string} signature\n   * @return {Param[]} params\n   */\n\n\n  function parseSignature(rawSignature) {\n    const params = [];\n\n    if (typeof rawSignature !== 'string') {\n      throw new TypeError('Signatures must be strings');\n    }\n\n    const signature = rawSignature.trim();\n\n    if (signature === '') {\n      return params;\n    }\n\n    const rawParams = signature.split(',');\n\n    for (let i = 0; i < rawParams.length; ++i) {\n      const parsedParam = parseParam(rawParams[i].trim());\n\n      if (parsedParam.restParam && i !== rawParams.length - 1) {\n        throw new SyntaxError('Unexpected rest parameter \"' + rawParams[i] + '\": ' + 'only allowed for the last parameter');\n      } // if invalid, short-circuit (all the types may have been filtered)\n\n\n      if (parsedParam.types.length === 0) {\n        return null;\n      }\n\n      params.push(parsedParam);\n    }\n\n    return params;\n  }\n  /**\n   * Test whether a set of params contains a restParam\n   * @param {Param[]} params\n   * @return {boolean} Returns true when the last parameter is a restParam\n   */\n\n\n  function hasRestParam(params) {\n    const param = last(params);\n    return param ? param.restParam : false;\n  }\n  /**\n   * Create a type test for a single parameter, which can have one or multiple\n   * types.\n   * @param {Param} param\n   * @return {function(x: *) : boolean} Returns a test function\n   */\n\n\n  function compileTest(param) {\n    if (!param || param.types.length === 0) {\n      // nothing to do\n      return ok;\n    } else if (param.types.length === 1) {\n      return findType(param.types[0].name).test;\n    } else if (param.types.length === 2) {\n      const test0 = findType(param.types[0].name).test;\n      const test1 = findType(param.types[1].name).test;\n      return function or(x) {\n        return test0(x) || test1(x);\n      };\n    } else {\n      // param.types.length > 2\n      const tests = param.types.map(function (type) {\n        return findType(type.name).test;\n      });\n      return function or(x) {\n        for (let i = 0; i < tests.length; i++) {\n          if (tests[i](x)) {\n            return true;\n          }\n        }\n\n        return false;\n      };\n    }\n  }\n  /**\n   * Create a test for all parameters of a signature\n   * @param {Param[]} params\n   * @return {function(args: Array<*>) : boolean}\n   */\n\n\n  function compileTests(params) {\n    let tests, test0, test1;\n\n    if (hasRestParam(params)) {\n      // variable arguments like '...number'\n      tests = initial(params).map(compileTest);\n      const varIndex = tests.length;\n      const lastTest = compileTest(last(params));\n\n      const testRestParam = function (args) {\n        for (let i = varIndex; i < args.length; i++) {\n          if (!lastTest(args[i])) {\n            return false;\n          }\n        }\n\n        return true;\n      };\n\n      return function testArgs(args) {\n        for (let i = 0; i < tests.length; i++) {\n          if (!tests[i](args[i])) {\n            return false;\n          }\n        }\n\n        return testRestParam(args) && args.length >= varIndex + 1;\n      };\n    } else {\n      // no variable arguments\n      if (params.length === 0) {\n        return function testArgs(args) {\n          return args.length === 0;\n        };\n      } else if (params.length === 1) {\n        test0 = compileTest(params[0]);\n        return function testArgs(args) {\n          return test0(args[0]) && args.length === 1;\n        };\n      } else if (params.length === 2) {\n        test0 = compileTest(params[0]);\n        test1 = compileTest(params[1]);\n        return function testArgs(args) {\n          return test0(args[0]) && test1(args[1]) && args.length === 2;\n        };\n      } else {\n        // arguments.length > 2\n        tests = params.map(compileTest);\n        return function testArgs(args) {\n          for (let i = 0; i < tests.length; i++) {\n            if (!tests[i](args[i])) {\n              return false;\n            }\n          }\n\n          return args.length === tests.length;\n        };\n      }\n    }\n  }\n  /**\n   * Find the parameter at a specific index of a Params list.\n   * Handles rest parameters.\n   * @param {Param[]} params\n   * @param {number} index\n   * @return {Param | null} Returns the matching parameter when found,\n   *                        null otherwise.\n   */\n\n\n  function getParamAtIndex(params, index) {\n    return index < params.length ? params[index] : hasRestParam(params) ? last(params) : null;\n  }\n  /**\n   * Get all type names of a parameter\n   * @param {Params[]} params\n   * @param {number} index\n   * @return {string[]} Returns an array with type names\n   */\n\n\n  function getTypeSetAtIndex(params, index) {\n    const param = getParamAtIndex(params, index);\n\n    if (!param) {\n      return new Set();\n    }\n\n    return paramTypeSet(param);\n  }\n  /**\n   * Test whether a type is an exact type or conversion\n   * @param {Type} type\n   * @return {boolean} Returns true when\n   */\n\n\n  function isExactType(type) {\n    return type.conversion === null || type.conversion === undefined;\n  }\n  /**\n   * Helper function for creating error messages: create an array with\n   * all available types on a specific argument index.\n   * @param {Signature[]} signatures\n   * @param {number} index\n   * @return {string[]} Returns an array with available types\n   */\n\n\n  function mergeExpectedParams(signatures, index) {\n    const typeSet = new Set();\n    signatures.forEach(signature => {\n      const paramSet = getTypeSetAtIndex(signature.params, index);\n      let name;\n\n      for (name of paramSet) {\n        typeSet.add(name);\n      }\n    });\n    return typeSet.has('any') ? ['any'] : Array.from(typeSet);\n  }\n  /**\n   * Create\n   * @param {string} name             The name of the function\n   * @param {array.<*>} args          The actual arguments passed to the function\n   * @param {Signature[]} signatures  A list with available signatures\n   * @return {TypeError} Returns a type error with additional data\n   *                     attached to it in the property `data`\n   */\n\n\n  function createError(name, args, signatures) {\n    let err, expected;\n\n    const _name = name || 'unnamed'; // test for wrong type at some index\n\n\n    let matchingSignatures = signatures;\n    let index;\n\n    for (index = 0; index < args.length; index++) {\n      const nextMatchingDefs = [];\n      matchingSignatures.forEach(signature => {\n        const param = getParamAtIndex(signature.params, index);\n        const test = compileTest(param);\n\n        if ((index < signature.params.length || hasRestParam(signature.params)) && test(args[index])) {\n          nextMatchingDefs.push(signature);\n        }\n      });\n\n      if (nextMatchingDefs.length === 0) {\n        // no matching signatures anymore, throw error \"wrong type\"\n        expected = mergeExpectedParams(matchingSignatures, index);\n\n        if (expected.length > 0) {\n          const actualTypes = findTypeNames(args[index]);\n          err = new TypeError('Unexpected type of argument in function ' + _name + ' (expected: ' + expected.join(' or ') + ', actual: ' + actualTypes.join(' | ') + ', index: ' + index + ')');\n          err.data = {\n            category: 'wrongType',\n            fn: _name,\n            index,\n            actual: actualTypes,\n            expected\n          };\n          return err;\n        }\n      } else {\n        matchingSignatures = nextMatchingDefs;\n      }\n    } // test for too few arguments\n\n\n    const lengths = matchingSignatures.map(function (signature) {\n      return hasRestParam(signature.params) ? Infinity : signature.params.length;\n    });\n\n    if (args.length < Math.min.apply(null, lengths)) {\n      expected = mergeExpectedParams(matchingSignatures, index);\n      err = new TypeError('Too few arguments in function ' + _name + ' (expected: ' + expected.join(' or ') + ', index: ' + args.length + ')');\n      err.data = {\n        category: 'tooFewArgs',\n        fn: _name,\n        index: args.length,\n        expected\n      };\n      return err;\n    } // test for too many arguments\n\n\n    const maxLength = Math.max.apply(null, lengths);\n\n    if (args.length > maxLength) {\n      err = new TypeError('Too many arguments in function ' + _name + ' (expected: ' + maxLength + ', actual: ' + args.length + ')');\n      err.data = {\n        category: 'tooManyArgs',\n        fn: _name,\n        index: args.length,\n        expectedLength: maxLength\n      };\n      return err;\n    } // Generic error\n\n\n    const argTypes = [];\n\n    for (let i = 0; i < args.length; ++i) {\n      argTypes.push(findTypeNames(args[i]).join('|'));\n    }\n\n    err = new TypeError('Arguments of type \"' + argTypes.join(', ') + '\" do not match any of the defined signatures of function ' + _name + '.');\n    err.data = {\n      category: 'mismatch',\n      actual: argTypes\n    };\n    return err;\n  }\n  /**\n   * Find the lowest index of all exact types of a parameter (no conversions)\n   * @param {Param} param\n   * @return {number} Returns the index of the lowest type in typed.types\n   */\n\n\n  function getLowestTypeIndex(param) {\n    let min = typeList.length + 1;\n\n    for (let i = 0; i < param.types.length; i++) {\n      if (isExactType(param.types[i])) {\n        min = Math.min(min, param.types[i].typeIndex);\n      }\n    }\n\n    return min;\n  }\n  /**\n   * Find the lowest index of the conversion of all types of the parameter\n   * having a conversion\n   * @param {Param} param\n   * @return {number} Returns the lowest index of the conversions of this type\n   */\n\n\n  function getLowestConversionIndex(param) {\n    let min = nConversions + 1;\n\n    for (let i = 0; i < param.types.length; i++) {\n      if (!isExactType(param.types[i])) {\n        min = Math.min(min, param.types[i].conversionIndex);\n      }\n    }\n\n    return min;\n  }\n  /**\n   * Compare two params\n   * @param {Param} param1\n   * @param {Param} param2\n   * @return {number} returns -1 when param1 must get a lower\n   *                  index than param2, 1 when the opposite,\n   *                  or zero when both are equal\n   */\n\n\n  function compareParams(param1, param2) {\n    // We compare a number of metrics on a param in turn:\n    // 1) 'any' parameters are the least preferred\n    if (param1.hasAny) {\n      if (!param2.hasAny) {\n        return 1;\n      }\n    } else if (param2.hasAny) {\n      return -1;\n    } // 2) Prefer non-rest to rest parameters\n\n\n    if (param1.restParam) {\n      if (!param2.restParam) {\n        return 1;\n      }\n    } else if (param2.restParam) {\n      return -1;\n    } // 3) Prefer exact type match to conversions\n\n\n    if (param1.hasConversion) {\n      if (!param2.hasConversion) {\n        return 1;\n      }\n    } else if (param2.hasConversion) {\n      return -1;\n    } // 4) Prefer lower type index:\n\n\n    const typeDiff = getLowestTypeIndex(param1) - getLowestTypeIndex(param2);\n\n    if (typeDiff < 0) {\n      return -1;\n    }\n\n    if (typeDiff > 0) {\n      return 1;\n    } // 5) Prefer lower conversion index\n\n\n    const convDiff = getLowestConversionIndex(param1) - getLowestConversionIndex(param2);\n\n    if (convDiff < 0) {\n      return -1;\n    }\n\n    if (convDiff > 0) {\n      return 1;\n    } // Don't have a basis for preference\n\n\n    return 0;\n  }\n  /**\n   * Compare two signatures\n   * @param {Signature} signature1\n   * @param {Signature} signature2\n   * @return {number} returns a negative number when param1 must get a lower\n   *                  index than param2, a positive number when the opposite,\n   *                  or zero when both are equal\n   */\n\n\n  function compareSignatures(signature1, signature2) {\n    const pars1 = signature1.params;\n    const pars2 = signature2.params;\n    const last1 = last(pars1);\n    const last2 = last(pars2);\n    const hasRest1 = hasRestParam(pars1);\n    const hasRest2 = hasRestParam(pars2); // We compare a number of metrics on signatures in turn:\n    // 1) An \"any rest param\" is least preferred\n\n    if (hasRest1 && last1.hasAny) {\n      if (!hasRest2 || !last2.hasAny) {\n        return 1;\n      }\n    } else if (hasRest2 && last2.hasAny) {\n      return -1;\n    } // 2) Minimize the number of 'any' parameters\n\n\n    let any1 = 0;\n    let conv1 = 0;\n    let par;\n\n    for (par of pars1) {\n      if (par.hasAny) ++any1;\n      if (par.hasConversion) ++conv1;\n    }\n\n    let any2 = 0;\n    let conv2 = 0;\n\n    for (par of pars2) {\n      if (par.hasAny) ++any2;\n      if (par.hasConversion) ++conv2;\n    }\n\n    if (any1 !== any2) {\n      return any1 - any2;\n    } // 3) A conversion rest param is less preferred\n\n\n    if (hasRest1 && last1.hasConversion) {\n      if (!hasRest2 || !last2.hasConversion) {\n        return 1;\n      }\n    } else if (hasRest2 && last2.hasConversion) {\n      return -1;\n    } // 4) Minimize the number of conversions\n\n\n    if (conv1 !== conv2) {\n      return conv1 - conv2;\n    } // 5) Prefer no rest param\n\n\n    if (hasRest1) {\n      if (!hasRest2) {\n        return 1;\n      }\n    } else if (hasRest2) {\n      return -1;\n    } // 6) Prefer shorter with rest param, longer without\n\n\n    const lengthCriterion = (pars1.length - pars2.length) * (hasRest1 ? -1 : 1);\n\n    if (lengthCriterion !== 0) {\n      return lengthCriterion;\n    } // Signatures are identical in each of the above metrics.\n    // In particular, they are the same length.\n    // We can therefore compare the parameters one by one.\n    // First we count which signature has more preferred parameters.\n\n\n    const comparisons = [];\n    let tc = 0;\n\n    for (let i = 0; i < pars1.length; ++i) {\n      const thisComparison = compareParams(pars1[i], pars2[i]);\n      comparisons.push(thisComparison);\n      tc += thisComparison;\n    }\n\n    if (tc !== 0) {\n      return tc;\n    } // They have the same number of preferred parameters, so go by the\n    // earliest parameter in which we have a preference.\n    // In other words, dispatch is driven somewhat more by earlier\n    // parameters than later ones.\n\n\n    let c;\n\n    for (c of comparisons) {\n      if (c !== 0) {\n        return c;\n      }\n    } // It's a tossup:\n\n\n    return 0;\n  }\n  /**\n   * Produce a list of all conversions from distinct types to one of\n   * the given types.\n   *\n   * @param {string[]} typeNames\n   * @return {ConversionDef[]} Returns the conversions that are available\n   *                        resulting in any given type (if any)\n   */\n\n\n  function availableConversions(typeNames) {\n    if (typeNames.length === 0) {\n      return [];\n    }\n\n    const types = typeNames.map(findType);\n\n    if (typeNames.length > 1) {\n      types.sort((t1, t2) => t1.index - t2.index);\n    }\n\n    let matches = types[0].conversionsTo;\n\n    if (typeNames.length === 1) {\n      return matches;\n    }\n\n    matches = matches.concat([]); // shallow copy the matches\n    // Since the types are now in index order, we just want the first\n    // occurrence of any from type:\n\n    const knownTypes = new Set(typeNames);\n\n    for (let i = 1; i < types.length; ++i) {\n      let newMatch;\n\n      for (newMatch of types[i].conversionsTo) {\n        if (!knownTypes.has(newMatch.from)) {\n          matches.push(newMatch);\n          knownTypes.add(newMatch.from);\n        }\n      }\n    }\n\n    return matches;\n  }\n  /**\n   * Preprocess arguments before calling the original function:\n   * - if needed convert the parameters\n   * - in case of rest parameters, move the rest parameters into an Array\n   * @param {Param[]} params\n   * @param {function} fn\n   * @return {function} Returns a wrapped function\n   */\n\n\n  function compileArgsPreprocessing(params, fn) {\n    let fnConvert = fn; // TODO: can we make this wrapper function smarter/simpler?\n\n    if (params.some(p => p.hasConversion)) {\n      const restParam = hasRestParam(params);\n      const compiledConversions = params.map(compileArgConversion);\n\n      fnConvert = function convertArgs() {\n        const args = [];\n        const last = restParam ? arguments.length - 1 : arguments.length;\n\n        for (let i = 0; i < last; i++) {\n          args[i] = compiledConversions[i](arguments[i]);\n        }\n\n        if (restParam) {\n          args[last] = arguments[last].map(compiledConversions[last]);\n        }\n\n        return fn.apply(this, args);\n      };\n    }\n\n    let fnPreprocess = fnConvert;\n\n    if (hasRestParam(params)) {\n      const offset = params.length - 1;\n\n      fnPreprocess = function preprocessRestParams() {\n        return fnConvert.apply(this, slice(arguments, 0, offset).concat([slice(arguments, offset)]));\n      };\n    }\n\n    return fnPreprocess;\n  }\n  /**\n   * Compile conversion for a parameter to the right type\n   * @param {Param} param\n   * @return {function} Returns the wrapped function that will convert arguments\n   *\n   */\n\n\n  function compileArgConversion(param) {\n    let test0, test1, conversion0, conversion1;\n    const tests = [];\n    const conversions = [];\n    param.types.forEach(function (type) {\n      if (type.conversion) {\n        tests.push(findType(type.conversion.from).test);\n        conversions.push(type.conversion.convert);\n      }\n    }); // create optimized conversion functions depending on the number of conversions\n\n    switch (conversions.length) {\n      case 0:\n        return function convertArg(arg) {\n          return arg;\n        };\n\n      case 1:\n        test0 = tests[0];\n        conversion0 = conversions[0];\n        return function convertArg(arg) {\n          if (test0(arg)) {\n            return conversion0(arg);\n          }\n\n          return arg;\n        };\n\n      case 2:\n        test0 = tests[0];\n        test1 = tests[1];\n        conversion0 = conversions[0];\n        conversion1 = conversions[1];\n        return function convertArg(arg) {\n          if (test0(arg)) {\n            return conversion0(arg);\n          }\n\n          if (test1(arg)) {\n            return conversion1(arg);\n          }\n\n          return arg;\n        };\n\n      default:\n        return function convertArg(arg) {\n          for (let i = 0; i < conversions.length; i++) {\n            if (tests[i](arg)) {\n              return conversions[i](arg);\n            }\n          }\n\n          return arg;\n        };\n    }\n  }\n  /**\n   * Split params with union types in to separate params.\n   *\n   * For example:\n   *\n   *     splitParams([['Array', 'Object'], ['string', 'RegExp'])\n   *     // returns:\n   *     // [\n   *     //   ['Array', 'string'],\n   *     //   ['Array', 'RegExp'],\n   *     //   ['Object', 'string'],\n   *     //   ['Object', 'RegExp']\n   *     // ]\n   *\n   * @param {Param[]} params\n   * @return {Param[]}\n   */\n\n\n  function splitParams(params) {\n    function _splitParams(params, index, paramsSoFar) {\n      if (index < params.length) {\n        const param = params[index];\n        let resultingParams = [];\n\n        if (param.restParam) {\n          // split the types of a rest parameter in two:\n          // one with only exact types, and one with exact types and conversions\n          const exactTypes = param.types.filter(isExactType);\n\n          if (exactTypes.length < param.types.length) {\n            resultingParams.push({\n              types: exactTypes,\n              name: '...' + exactTypes.map(t => t.name).join('|'),\n              hasAny: exactTypes.some(t => t.isAny),\n              hasConversion: false,\n              restParam: true\n            });\n          }\n\n          resultingParams.push(param);\n        } else {\n          // split all the types of a regular parameter into one type per param\n          resultingParams = param.types.map(function (type) {\n            return {\n              types: [type],\n              name: type.name,\n              hasAny: type.isAny,\n              hasConversion: type.conversion,\n              restParam: false\n            };\n          });\n        } // recurse over the groups with types\n\n\n        return flatMap(resultingParams, function (nextParam) {\n          return _splitParams(params, index + 1, paramsSoFar.concat([nextParam]));\n        });\n      } else {\n        // we've reached the end of the parameters.\n        return [paramsSoFar];\n      }\n    }\n\n    return _splitParams(params, 0, []);\n  }\n  /**\n   * Test whether two param lists represent conflicting signatures\n   * @param {Param[]} params1\n   * @param {Param[]} params2\n   * @return {boolean} Returns true when the signatures conflict, false otherwise.\n   */\n\n\n  function conflicting(params1, params2) {\n    const ii = Math.max(params1.length, params2.length);\n\n    for (let i = 0; i < ii; i++) {\n      const typeSet1 = getTypeSetAtIndex(params1, i);\n      const typeSet2 = getTypeSetAtIndex(params2, i);\n      let overlap = false;\n      let name;\n\n      for (name of typeSet2) {\n        if (typeSet1.has(name)) {\n          overlap = true;\n          break;\n        }\n      }\n\n      if (!overlap) {\n        return false;\n      }\n    }\n\n    const len1 = params1.length;\n    const len2 = params2.length;\n    const restParam1 = hasRestParam(params1);\n    const restParam2 = hasRestParam(params2);\n    return restParam1 ? restParam2 ? len1 === len2 : len2 >= len1 : restParam2 ? len1 >= len2 : len1 === len2;\n  }\n  /**\n   * Helper function for `resolveReferences` that returns a copy of\n   * functionList wihe any prior resolutions cleared out, in case we are\n   * recycling signatures from a prior typed function construction.\n   *\n   * @param {Array.<function|typed-reference>} functionList\n   * @return {Array.<function|typed-reference>}\n   */\n\n\n  function clearResolutions(functionList) {\n    return functionList.map(fn => {\n      if (isReferToSelf(fn)) {\n        return referToSelf(fn.referToSelf.callback);\n      }\n\n      if (isReferTo(fn)) {\n        return makeReferTo(fn.referTo.references, fn.referTo.callback);\n      }\n\n      return fn;\n    });\n  }\n  /**\n   * Take a list of references, a list of functions functionList, and a\n   * signatureMap indexing signatures into functionList, and return\n   * the list of resolutions, or a false-y value if they don't all\n   * resolve in a valid way (yet).\n   *\n   * @param {string[]} references\n   * @param {Array<function|typed-reference} functionList\n   * @param {Object.<string, integer>} signatureMap\n   * @return {function[] | false} resolutions\n   */\n\n\n  function collectResolutions(references, functionList, signatureMap) {\n    const resolvedReferences = [];\n    let reference;\n\n    for (reference of references) {\n      let resolution = signatureMap[reference];\n\n      if (typeof resolution !== 'number') {\n        throw new TypeError('No definition for referenced signature \"' + reference + '\"');\n      }\n\n      resolution = functionList[resolution];\n\n      if (typeof resolution !== 'function') {\n        return false;\n      }\n\n      resolvedReferences.push(resolution);\n    }\n\n    return resolvedReferences;\n  }\n  /**\n   * Resolve any references in the functionList for the typed function\n   * itself. The signatureMap tells which index in the functionList a\n   * given signature should be mapped to (for use in resolving typed.referTo)\n   * and self provides the destions of a typed.referToSelf.\n   *\n   * @param {Array<function | typed-reference-object>} functionList\n   * @param {Object.<string, function>} signatureMap\n   * @param {function} self  The typed-function itself\n   * @return {Array<function>} The list of resolved functions\n   */\n\n\n  function resolveReferences(functionList, signatureMap, self) {\n    const resolvedFunctions = clearResolutions(functionList);\n    const isResolved = new Array(resolvedFunctions.length).fill(false);\n    let leftUnresolved = true;\n\n    while (leftUnresolved) {\n      leftUnresolved = false;\n      let nothingResolved = true;\n\n      for (let i = 0; i < resolvedFunctions.length; ++i) {\n        if (isResolved[i]) continue;\n        const fn = resolvedFunctions[i];\n\n        if (isReferToSelf(fn)) {\n          resolvedFunctions[i] = fn.referToSelf.callback(self); // Preserve reference in case signature is reused someday:\n\n          resolvedFunctions[i].referToSelf = fn.referToSelf;\n          isResolved[i] = true;\n          nothingResolved = false;\n        } else if (isReferTo(fn)) {\n          const resolvedReferences = collectResolutions(fn.referTo.references, resolvedFunctions, signatureMap);\n\n          if (resolvedReferences) {\n            resolvedFunctions[i] = fn.referTo.callback.apply(this, resolvedReferences); // Preserve reference in case signature is reused someday:\n\n            resolvedFunctions[i].referTo = fn.referTo;\n            isResolved[i] = true;\n            nothingResolved = false;\n          } else {\n            leftUnresolved = true;\n          }\n        }\n      }\n\n      if (nothingResolved && leftUnresolved) {\n        throw new SyntaxError('Circular reference detected in resolving typed.referTo');\n      }\n    }\n\n    return resolvedFunctions;\n  }\n  /**\n   * Validate whether any of the function bodies contains a self-reference\n   * usage like `this(...)` or `this.signatures`. This self-referencing is\n   * deprecated since typed-function v3. It has been replaced with\n   * the functions typed.referTo and typed.referToSelf.\n   * @param {Object.<string, function>} signaturesMap\n   */\n\n\n  function validateDeprecatedThis(signaturesMap) {\n    // TODO: remove this deprecation warning logic some day (it's introduced in v3)\n    // match occurrences like 'this(' and 'this.signatures'\n    const deprecatedThisRegex = /\\bthis(\\(|\\.signatures\\b)/;\n    Object.keys(signaturesMap).forEach(signature => {\n      const fn = signaturesMap[signature];\n\n      if (deprecatedThisRegex.test(fn.toString())) {\n        throw new SyntaxError('Using `this` to self-reference a function ' + 'is deprecated since typed-function@3. ' + 'Use typed.referTo and typed.referToSelf instead.');\n      }\n    });\n  }\n  /**\n   * Create a typed function\n   * @param {String} name               The name for the typed function\n   * @param {Object.<string, function>} rawSignaturesMap\n   *                                    An object with one or\n   *                                    multiple signatures as key, and the\n   *                                    function corresponding to the\n   *                                    signature as value.\n   * @return {function}  Returns the created typed function.\n   */\n\n\n  function createTypedFunction(name, rawSignaturesMap) {\n    typed.createCount++;\n\n    if (Object.keys(rawSignaturesMap).length === 0) {\n      throw new SyntaxError('No signatures provided');\n    }\n\n    if (typed.warnAgainstDeprecatedThis) {\n      validateDeprecatedThis(rawSignaturesMap);\n    } // Main processing loop for signatures\n\n\n    const parsedParams = [];\n    const originalFunctions = [];\n    const signaturesMap = {};\n    const preliminarySignatures = []; // may have duplicates from conversions\n\n    let signature;\n\n    for (signature in rawSignaturesMap) {\n      // A) Protect against polluted Object prototype:\n      if (!Object.prototype.hasOwnProperty.call(rawSignaturesMap, signature)) {\n        continue;\n      } // B) Parse the signature\n\n\n      const params = parseSignature(signature);\n      if (!params) continue; // C) Check for conflicts\n\n      parsedParams.forEach(function (pp) {\n        if (conflicting(pp, params)) {\n          throw new TypeError('Conflicting signatures \"' + stringifyParams(pp) + '\" and \"' + stringifyParams(params) + '\".');\n        }\n      });\n      parsedParams.push(params); // D) Store the provided function and add conversions\n\n      const functionIndex = originalFunctions.length;\n      originalFunctions.push(rawSignaturesMap[signature]);\n      const conversionParams = params.map(expandParam); // E) Split the signatures and collect them up\n\n      let sp;\n\n      for (sp of splitParams(conversionParams)) {\n        const spName = stringifyParams(sp);\n        preliminarySignatures.push({\n          params: sp,\n          name: spName,\n          fn: functionIndex\n        });\n\n        if (sp.every(p => !p.hasConversion)) {\n          signaturesMap[spName] = functionIndex;\n        }\n      }\n    }\n\n    preliminarySignatures.sort(compareSignatures); // Note the forward reference to theTypedFn\n\n    const resolvedFunctions = resolveReferences(originalFunctions, signaturesMap, theTypedFn); // Fill in the proper function for each signature\n\n    let s;\n\n    for (s in signaturesMap) {\n      if (Object.prototype.hasOwnProperty.call(signaturesMap, s)) {\n        signaturesMap[s] = resolvedFunctions[signaturesMap[s]];\n      }\n    }\n\n    const signatures = [];\n    const internalSignatureMap = new Map(); // benchmarks faster than object\n\n    for (s of preliminarySignatures) {\n      // Note it's only safe to eliminate duplicates like this\n      // _after_ the signature sorting step above; otherwise we might\n      // remove the wrong one.\n      if (!internalSignatureMap.has(s.name)) {\n        s.fn = resolvedFunctions[s.fn];\n        signatures.push(s);\n        internalSignatureMap.set(s.name, s);\n      }\n    } // we create a highly optimized checks for the first couple of signatures with max 2 arguments\n\n\n    const ok0 = signatures[0] && signatures[0].params.length <= 2 && !hasRestParam(signatures[0].params);\n    const ok1 = signatures[1] && signatures[1].params.length <= 2 && !hasRestParam(signatures[1].params);\n    const ok2 = signatures[2] && signatures[2].params.length <= 2 && !hasRestParam(signatures[2].params);\n    const ok3 = signatures[3] && signatures[3].params.length <= 2 && !hasRestParam(signatures[3].params);\n    const ok4 = signatures[4] && signatures[4].params.length <= 2 && !hasRestParam(signatures[4].params);\n    const ok5 = signatures[5] && signatures[5].params.length <= 2 && !hasRestParam(signatures[5].params);\n    const allOk = ok0 && ok1 && ok2 && ok3 && ok4 && ok5; // compile the tests\n\n    for (let i = 0; i < signatures.length; ++i) {\n      signatures[i].test = compileTests(signatures[i].params);\n    }\n\n    const test00 = ok0 ? compileTest(signatures[0].params[0]) : notOk;\n    const test10 = ok1 ? compileTest(signatures[1].params[0]) : notOk;\n    const test20 = ok2 ? compileTest(signatures[2].params[0]) : notOk;\n    const test30 = ok3 ? compileTest(signatures[3].params[0]) : notOk;\n    const test40 = ok4 ? compileTest(signatures[4].params[0]) : notOk;\n    const test50 = ok5 ? compileTest(signatures[5].params[0]) : notOk;\n    const test01 = ok0 ? compileTest(signatures[0].params[1]) : notOk;\n    const test11 = ok1 ? compileTest(signatures[1].params[1]) : notOk;\n    const test21 = ok2 ? compileTest(signatures[2].params[1]) : notOk;\n    const test31 = ok3 ? compileTest(signatures[3].params[1]) : notOk;\n    const test41 = ok4 ? compileTest(signatures[4].params[1]) : notOk;\n    const test51 = ok5 ? compileTest(signatures[5].params[1]) : notOk; // compile the functions\n\n    for (let i = 0; i < signatures.length; ++i) {\n      signatures[i].implementation = compileArgsPreprocessing(signatures[i].params, signatures[i].fn);\n    }\n\n    const fn0 = ok0 ? signatures[0].implementation : undef;\n    const fn1 = ok1 ? signatures[1].implementation : undef;\n    const fn2 = ok2 ? signatures[2].implementation : undef;\n    const fn3 = ok3 ? signatures[3].implementation : undef;\n    const fn4 = ok4 ? signatures[4].implementation : undef;\n    const fn5 = ok5 ? signatures[5].implementation : undef;\n    const len0 = ok0 ? signatures[0].params.length : -1;\n    const len1 = ok1 ? signatures[1].params.length : -1;\n    const len2 = ok2 ? signatures[2].params.length : -1;\n    const len3 = ok3 ? signatures[3].params.length : -1;\n    const len4 = ok4 ? signatures[4].params.length : -1;\n    const len5 = ok5 ? signatures[5].params.length : -1; // simple and generic, but also slow\n\n    const iStart = allOk ? 6 : 0;\n    const iEnd = signatures.length; // de-reference ahead for execution speed:\n\n    const tests = signatures.map(s => s.test);\n    const fns = signatures.map(s => s.implementation);\n\n    const generic = function generic() {\n      'use strict';\n\n      for (let i = iStart; i < iEnd; i++) {\n        if (tests[i](arguments)) {\n          return fns[i].apply(this, arguments);\n        }\n      }\n\n      return typed.onMismatch(name, arguments, signatures);\n    }; // create the typed function\n    // fast, specialized version. Falls back to the slower, generic one if needed\n\n\n    function theTypedFn(arg0, arg1) {\n      'use strict';\n\n      if (arguments.length === len0 && test00(arg0) && test01(arg1)) {\n        return fn0.apply(this, arguments);\n      }\n\n      if (arguments.length === len1 && test10(arg0) && test11(arg1)) {\n        return fn1.apply(this, arguments);\n      }\n\n      if (arguments.length === len2 && test20(arg0) && test21(arg1)) {\n        return fn2.apply(this, arguments);\n      }\n\n      if (arguments.length === len3 && test30(arg0) && test31(arg1)) {\n        return fn3.apply(this, arguments);\n      }\n\n      if (arguments.length === len4 && test40(arg0) && test41(arg1)) {\n        return fn4.apply(this, arguments);\n      }\n\n      if (arguments.length === len5 && test50(arg0) && test51(arg1)) {\n        return fn5.apply(this, arguments);\n      }\n\n      return generic.apply(this, arguments);\n    } // attach name the typed function\n\n\n    try {\n      Object.defineProperty(theTypedFn, 'name', {\n        value: name\n      });\n    } catch (err) {// old browsers do not support Object.defineProperty and some don't support setting the name property\n      // the function name is not essential for the functioning, it's mostly useful for debugging,\n      // so it's fine to have unnamed functions.\n    } // attach signatures to the function.\n    // This property is close to the original collection of signatures\n    // used to create the typed-function, just with unions split:\n\n\n    theTypedFn.signatures = signaturesMap; // Store internal data for functions like resolve, find, etc.\n    // Also serves as the flag that this is a typed-function\n\n    theTypedFn._typedFunctionData = {\n      signatures,\n      signatureMap: internalSignatureMap\n    };\n    return theTypedFn;\n  }\n  /**\n   * Action to take on mismatch\n   * @param {string} name      Name of function that was attempted to be called\n   * @param {Array} args       Actual arguments to the call\n   * @param {Array} signatures Known signatures of the named typed-function\n   */\n\n\n  function _onMismatch(name, args, signatures) {\n    throw createError(name, args, signatures);\n  }\n  /**\n   * Return all but the last items of an array or function Arguments\n   * @param {Array | Arguments} arr\n   * @return {Array}\n   */\n\n\n  function initial(arr) {\n    return slice(arr, 0, arr.length - 1);\n  }\n  /**\n   * return the last item of an array or function Arguments\n   * @param {Array | Arguments} arr\n   * @return {*}\n   */\n\n\n  function last(arr) {\n    return arr[arr.length - 1];\n  }\n  /**\n   * Slice an array or function Arguments\n   * @param {Array | Arguments | IArguments} arr\n   * @param {number} start\n   * @param {number} [end]\n   * @return {Array}\n   */\n\n\n  function slice(arr, start, end) {\n    return Array.prototype.slice.call(arr, start, end);\n  }\n  /**\n   * Return the first item from an array for which test(arr[i]) returns true\n   * @param {Array} arr\n   * @param {function} test\n   * @return {* | undefined} Returns the first matching item\n   *                         or undefined when there is no match\n   */\n\n\n  function findInArray(arr, test) {\n    for (let i = 0; i < arr.length; i++) {\n      if (test(arr[i])) {\n        return arr[i];\n      }\n    }\n\n    return undefined;\n  }\n  /**\n   * Flat map the result invoking a callback for every item in an array.\n   * https://gist.github.com/samgiles/762ee337dff48623e729\n   * @param {Array} arr\n   * @param {function} callback\n   * @return {Array}\n   */\n\n\n  function flatMap(arr, callback) {\n    return Array.prototype.concat.apply([], arr.map(callback));\n  }\n  /**\n   * Create a reference callback to one or multiple signatures\n   *\n   * Syntax:\n   *\n   *     typed.referTo(signature1, signature2, ..., function callback(fn1, fn2, ...) {\n   *       // ...\n   *     })\n   *\n   * @returns {{referTo: {references: string[], callback}}}\n   */\n\n\n  function referTo() {\n    const references = initial(arguments).map(s => stringifyParams(parseSignature(s)));\n    const callback = last(arguments);\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Callback function expected as last argument');\n    }\n\n    return makeReferTo(references, callback);\n  }\n\n  function makeReferTo(references, callback) {\n    return {\n      referTo: {\n        references,\n        callback\n      }\n    };\n  }\n  /**\n   * Create a reference callback to the typed-function itself\n   *\n   * @param {(self: function) => function} callback\n   * @returns {{referToSelf: { callback: function }}}\n   */\n\n\n  function referToSelf(callback) {\n    if (typeof callback !== 'function') {\n      throw new TypeError('Callback function expected as first argument');\n    }\n\n    return {\n      referToSelf: {\n        callback\n      }\n    };\n  }\n  /**\n   * Test whether something is a referTo object, holding a list with reference\n   * signatures and a callback.\n   *\n   * @param {Object | function} objectOrFn\n   * @returns {boolean}\n   */\n\n\n  function isReferTo(objectOrFn) {\n    return objectOrFn && typeof objectOrFn.referTo === 'object' && Array.isArray(objectOrFn.referTo.references) && typeof objectOrFn.referTo.callback === 'function';\n  }\n  /**\n   * Test whether something is a referToSelf object, holding a callback where\n   * to pass `self`.\n   *\n   * @param {Object | function} objectOrFn\n   * @returns {boolean}\n   */\n\n\n  function isReferToSelf(objectOrFn) {\n    return objectOrFn && typeof objectOrFn.referToSelf === 'object' && typeof objectOrFn.referToSelf.callback === 'function';\n  }\n  /**\n   * Check if name is (A) new, (B) a match, or (C) a mismatch; and throw\n   * an error in case (C).\n   *\n   * @param { string | undefined } nameSoFar\n   * @param { string | undefined } newName\n   * @returns { string } updated name\n   */\n\n\n  function checkName(nameSoFar, newName) {\n    if (!nameSoFar) {\n      return newName;\n    }\n\n    if (newName && newName !== nameSoFar) {\n      const err = new Error('Function names do not match (expected: ' + nameSoFar + ', actual: ' + newName + ')');\n      err.data = {\n        actual: newName,\n        expected: nameSoFar\n      };\n      throw err;\n    }\n\n    return nameSoFar;\n  }\n  /**\n   * Retrieve the implied name from an object with signature keys\n   * and function values, checking whether all value names match\n   *\n   * @param { {string: function} } obj\n   */\n\n\n  function getObjectName(obj) {\n    let name;\n\n    for (const key in obj) {\n      // Only pay attention to own properties, and only if their values\n      // are typed functions or functions with a signature property\n      if (Object.prototype.hasOwnProperty.call(obj, key) && (isTypedFunction(obj[key]) || typeof obj[key].signature === 'string')) {\n        name = checkName(name, obj[key].name);\n      }\n    }\n\n    return name;\n  }\n  /**\n   * Copy all of the signatures from the second argument into the first,\n   * which is modified by side effect, checking for conflicts\n   *\n   * @param {Object.<string, function|typed-reference>} dest\n   * @param {Object.<string, function|typed-reference>} source\n   */\n\n\n  function mergeSignatures(dest, source) {\n    let key;\n\n    for (key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        if (key in dest) {\n          if (source[key] !== dest[key]) {\n            const err = new Error('Signature \"' + key + '\" is defined twice');\n            err.data = {\n              signature: key,\n              sourceFunction: source[key],\n              destFunction: dest[key]\n            };\n            throw err;\n          } // else: both signatures point to the same function, that's fine\n\n        }\n\n        dest[key] = source[key];\n      }\n    }\n  }\n\n  const saveTyped = typed;\n  /**\n   * Originally the main function was a typed function itself, but then\n   * it might not be able to generate error messages if the client\n   * replaced the type system with different names.\n   *\n   * Main entry: typed([name], functions/objects with signatures...)\n   *\n   * Assembles and returns a new typed-function from the given items\n   * that provide signatures and implementations, each of which may be\n   * * a plain object mapping (string) signatures to implementing functions,\n   * * a previously constructed typed function, or\n   * * any other single function with a string-valued property `signature`.\n    * The name of the resulting typed-function will be given by the\n   * string-valued name argument if present, or if not, by the name\n   * of any of the arguments that have one, as long as any that do are\n   * consistent with each other. If no name is specified, the name will be\n   * an empty string.\n   *\n   * @param {string} maybeName [optional]\n   * @param {(function|object)[]} signature providers\n   * @returns {typed-function}\n   */\n\n  typed = function (maybeName) {\n    const named = typeof maybeName === 'string';\n    const start = named ? 1 : 0;\n    let name = named ? maybeName : '';\n    const allSignatures = {};\n\n    for (let i = start; i < arguments.length; ++i) {\n      const item = arguments[i];\n      let theseSignatures = {};\n      let thisName;\n\n      if (typeof item === 'function') {\n        thisName = item.name;\n\n        if (typeof item.signature === 'string') {\n          // Case 1: Ordinary function with a string 'signature' property\n          theseSignatures[item.signature] = item;\n        } else if (isTypedFunction(item)) {\n          // Case 2: Existing typed function\n          theseSignatures = item.signatures;\n        }\n      } else if (isPlainObject(item)) {\n        // Case 3: Plain object, assume keys = signatures, values = functions\n        theseSignatures = item;\n\n        if (!named) {\n          thisName = getObjectName(item);\n        }\n      }\n\n      if (Object.keys(theseSignatures).length === 0) {\n        const err = new TypeError('Argument to \\'typed\\' at index ' + i + ' is not a (typed) function, ' + 'nor an object with signatures as keys and functions as values.');\n        err.data = {\n          index: i,\n          argument: item\n        };\n        throw err;\n      }\n\n      if (!named) {\n        name = checkName(name, thisName);\n      }\n\n      mergeSignatures(allSignatures, theseSignatures);\n    }\n\n    return createTypedFunction(name || '', allSignatures);\n  };\n\n  typed.create = create;\n  typed.createCount = saveTyped.createCount;\n  typed.onMismatch = _onMismatch;\n  typed.throwMismatchError = _onMismatch;\n  typed.createError = createError;\n  typed.clear = clear;\n  typed.clearConversions = clearConversions;\n  typed.addTypes = addTypes;\n  typed._findType = findType; // For unit testing only\n\n  typed.referTo = referTo;\n  typed.referToSelf = referToSelf;\n  typed.convert = convert;\n  typed.findSignature = findSignature;\n  typed.find = find;\n  typed.isTypedFunction = isTypedFunction;\n  typed.warnAgainstDeprecatedThis = true;\n  /**\n   * add a type (convenience wrapper for typed.addTypes)\n   * @param {{name: string, test: function}} type\n   * @param {boolean} [beforeObjectTest=true]\n   *                          If true, the new test will be inserted before\n   *                          the test with name 'Object' (if any), since\n   *                          tests for Object match Array and classes too.\n   */\n\n  typed.addType = function (type, beforeObjectTest) {\n    let before = 'any';\n\n    if (beforeObjectTest !== false && typeMap.has('Object')) {\n      before = 'Object';\n    }\n\n    typed.addTypes([type], before);\n  };\n  /**\n   * Verify that the ConversionDef conversion has a valid format.\n   *\n   * @param {conversionDef} conversion\n   * @return {void}\n   * @throws {TypeError|SyntaxError}\n   */\n\n\n  function _validateConversion(conversion) {\n    if (!conversion || typeof conversion.from !== 'string' || typeof conversion.to !== 'string' || typeof conversion.convert !== 'function') {\n      throw new TypeError('Object with properties {from: string, to: string, convert: function} expected');\n    }\n\n    if (conversion.to === conversion.from) {\n      throw new SyntaxError('Illegal to define conversion from \"' + conversion.from + '\" to itself.');\n    }\n  }\n  /**\n   * Add a conversion\n   *\n   * @param {ConversionDef} conversion\n   * @returns {void}\n   * @throws {TypeError}\n   */\n\n\n  typed.addConversion = function (conversion) {\n    _validateConversion(conversion);\n\n    const to = findType(conversion.to);\n\n    if (to.conversionsTo.every(function (other) {\n      return other.from !== conversion.from;\n    })) {\n      to.conversionsTo.push({\n        from: conversion.from,\n        convert: conversion.convert,\n        index: nConversions++\n      });\n    } else {\n      throw new Error('There is already a conversion from \"' + conversion.from + '\" to \"' + to.name + '\"');\n    }\n  };\n  /**\n   * Convenience wrapper to call addConversion on each conversion in a list.\n   *\n   @param {ConversionDef[]} conversions\n   @returns {void}\n   @throws {TypeError}\n   */\n\n\n  typed.addConversions = function (conversions) {\n    conversions.forEach(typed.addConversion);\n  };\n  /**\n   * Remove the specified conversion. The format is the same as for\n   * addConversion, and the convert function must match or an error\n   * is thrown.\n   *\n   * @param {{from: string, to: string, convert: function}} conversion\n   * @returns {void}\n   * @throws {TypeError|SyntaxError|Error}\n   */\n\n\n  typed.removeConversion = function (conversion) {\n    _validateConversion(conversion);\n\n    const to = findType(conversion.to);\n    const existingConversion = findInArray(to.conversionsTo, c => c.from === conversion.from);\n\n    if (!existingConversion) {\n      throw new Error('Attempt to remove nonexistent conversion from ' + conversion.from + ' to ' + conversion.to);\n    }\n\n    if (existingConversion.convert !== conversion.convert) {\n      throw new Error('Conversion to remove does not match existing conversion');\n    }\n\n    const index = to.conversionsTo.indexOf(existingConversion);\n    to.conversionsTo.splice(index, 1);\n  };\n  /**\n   * Produce the specific signature that a typed function\n   * will execute on the given arguments. Here, a \"signature\" is an\n   * object with properties 'params', 'test', 'fn', and 'implementation'.\n   * This last property is a function that converts params as necessary\n   * and then calls 'fn'. Returns null if there is no matching signature.\n   * @param {typed-function} tf\n   * @param {any[]} argList\n   * @returns {{params: string, test: function, fn: function, implementation: function}}\n   */\n\n\n  typed.resolve = function (tf, argList) {\n    if (!isTypedFunction(tf)) {\n      throw new TypeError(NOT_TYPED_FUNCTION);\n    }\n\n    const sigs = tf._typedFunctionData.signatures;\n\n    for (let i = 0; i < sigs.length; ++i) {\n      if (sigs[i].test(argList)) {\n        return sigs[i];\n      }\n    }\n\n    return null;\n  };\n\n  return typed;\n}\n\nexport default create();\n//# sourceMappingURL=typed-function.mjs.map"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}