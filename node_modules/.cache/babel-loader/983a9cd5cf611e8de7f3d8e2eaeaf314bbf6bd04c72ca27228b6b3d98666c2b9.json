{"ast":null,"code":"import path from \"path\";\nimport * as fs from \"fs\";\nimport { SpreadSheetPageModel } from \"./spreadsheet-page.model\";\nconst {\n  convertArrayToCSV\n} = require(\"convert-array-to-csv\");\nconst FileSaver = require(\"file-saver\");\nconst converter = require(\"convert-array-to-csv\");\nconst {\n  convertCSVToArray\n} = require(\"convert-csv-to-array\");\n\n/**\n * This is the model for our spreadsheet application. The spreadsheet model contains an array of spreadsheet pages\n * that is used for the standard matrix of cells. This is one of our additional features for this project which is the application\n * having multiple pages that are saved and can be worked on.\n */\nexport class SpreadsheetModel {\n  constructor() {\n    this._spreadsheets = [];\n    this._currentPage = void 0;\n    const newPage = new SpreadSheetPageModel(\"Page 1\");\n    this._spreadsheets.push(newPage);\n    this._currentPage = newPage;\n  }\n\n  // Adds a generic page to the spreadsheet model and changes the current page.\n  addPage(data) {\n    let newPage;\n    const newPageName = \"Page \" + (this._spreadsheets.length + 1);\n    if (data !== undefined) {\n      newPage = new SpreadSheetPageModel(newPageName, data.length, data[0].length, data);\n    } else {\n      newPage = new SpreadSheetPageModel(newPageName);\n    }\n    this._spreadsheets.push(newPage);\n    this._currentPage = newPage;\n  }\n\n  // Tries to delete the given spreadsheet page.\n  deletePage(spreadsheet) {\n    // Find the index of the spreadsheet to delete\n    const index = this._spreadsheets.indexOf(spreadsheet);\n    const currentIndex = this._spreadsheets.indexOf(this._currentPage);\n    if (index !== -1) {\n      this._spreadsheets.splice(index, 1);\n    } else {\n      throw new Error(\"Spreadsheet not found\");\n    }\n    if (index === currentIndex) {\n      this._currentPage = this._spreadsheets[this._spreadsheets.length - 1];\n    }\n  }\n\n  // returns the current page that is being viewed in the Spreadsheet\n  getCurrentPage() {\n    return this._currentPage;\n  }\n\n  // sets the current page to the given spreadsheet page\n  setCurrentPage(newPage) {\n    // Find the index of the spreadsheet to delete\n    const index = this._spreadsheets.indexOf(newPage);\n    if (index !== -1) {\n      // Change the current page to the given page if found\n      this._currentPage = this._spreadsheets[index];\n    } else {\n      throw new Error(\"Spreadsheet not found\");\n    }\n  }\n\n  // Exports the data in the current spreadsheet page to a CSV formatted string\n  exportCurrentToCSV(filePath, separator = \";\") {\n    if (filePath === undefined) {\n      filePath = \"export.csv\";\n    }\n    try {\n      const csvFromArrayOfArrays = convertArrayToCSV(this._currentPage.getData(), {\n        separator\n      });\n\n      // Write the CSV data to a file\n      // fs.writeFileSync(filePath, csvFromArrayOfArrays);\n      const file = new File([\"meowmeow\"], filePath);\n      FileSaver.saveAs(file, filePath);\n\n      //   console.log(`File exported to: ${filePath}`);\n    } catch (error) {\n      console.error(\"Error exporting to CSV:\", error);\n    }\n  }\n\n  // imports a CSV from a filepath to a 2D array of data and adds it as a new page\n  importCSV(filepath) {\n    const csvFilePath = path.resolve(__dirname, filepath);\n    const fileContent = fs.readFileSync(csvFilePath, {\n      encoding: \"utf-8\"\n    }) + \"\\n\";\n    const csv = convertCSVToArray(fileContent, {\n      type: \"array\",\n      separator: \",\" // use the separator you use in your csv (e.g. '\\t', ',', ';' ...)\n    });\n\n    for (let r = 0; r < csv.length; r++) {\n      for (let c = 0; c < csv[0].length; c++) {\n        csv[r][c] = csv[r][c].toString();\n      }\n    }\n    this.addPage(csv);\n  }\n\n  // imports a CSV from a filepath to a 2D array of data and adds it as a new page\n  importCSVFromFile(file) {\n    const fileReader = new FileReader();\n    fileReader.readAsText(file);\n    fileReader.onload = () => {\n      const csv = convertCSVToArray(fileReader.result, {\n        type: \"array\",\n        separator: \",\" // use the separator you use in your csv (e.g. '\\t', ',', ';' ...)\n      });\n\n      for (let r = 0; r < csv.length; r++) {\n        for (let c = 0; c < csv[0].length; c++) {\n          csv[r][c] = csv[r][c].toString();\n        }\n      }\n      this.addPage(csv);\n    };\n  }\n  getNumPages() {\n    return this._spreadsheets.length;\n  }\n  getAllPageNames() {\n    const pageNames = [];\n    for (let i = 0; i < this._spreadsheets.length; i++) {\n      pageNames.push(this._spreadsheets[i].getSheetName());\n    }\n    return pageNames;\n  }\n}","map":{"version":3,"names":["path","fs","SpreadSheetPageModel","convertArrayToCSV","require","FileSaver","converter","convertCSVToArray","SpreadsheetModel","constructor","_spreadsheets","_currentPage","newPage","push","addPage","data","newPageName","length","undefined","deletePage","spreadsheet","index","indexOf","currentIndex","splice","Error","getCurrentPage","setCurrentPage","exportCurrentToCSV","filePath","separator","csvFromArrayOfArrays","getData","file","File","saveAs","error","console","importCSV","filepath","csvFilePath","resolve","__dirname","fileContent","readFileSync","encoding","csv","type","r","c","toString","importCSVFromFile","fileReader","FileReader","readAsText","onload","result","getNumPages","getAllPageNames","pageNames","i","getSheetName"],"sources":["C:/Users/micha/Documents/mechenko_main/PEDAGOGY/fa23/CS4530/project/team111-project/implementation/src/model/domain/spreadsheet.model.ts"],"sourcesContent":["import path from \"path\";\nimport * as fs from \"fs\";\nimport { ISpreadsheetModel } from \"../interfaces/spreadsheet.interface\";\nimport { SpreadSheetPageModel } from \"./spreadsheet-page.model\";\nconst { convertArrayToCSV } = require(\"convert-array-to-csv\");\nconst FileSaver = require(\"file-saver\");\nconst converter = require(\"convert-array-to-csv\");\nconst { convertCSVToArray } = require(\"convert-csv-to-array\");\n\n/**\n * This is the model for our spreadsheet application. The spreadsheet model contains an array of spreadsheet pages\n * that is used for the standard matrix of cells. This is one of our additional features for this project which is the application\n * having multiple pages that are saved and can be worked on.\n */\nexport class SpreadsheetModel implements ISpreadsheetModel {\n  private _spreadsheets: SpreadSheetPageModel[] = [];\n  private _currentPage: SpreadSheetPageModel;\n\n  public constructor() {\n    const newPage: SpreadSheetPageModel = new SpreadSheetPageModel(\"Page 1\");\n    this._spreadsheets.push(newPage);\n    this._currentPage = newPage;\n  }\n\n  // Adds a generic page to the spreadsheet model and changes the current page.\n  public addPage(data?: string[][]): void {\n    let newPage: SpreadSheetPageModel;\n    const newPageName = \"Page \" + (this._spreadsheets.length + 1);\n    if (data !== undefined) {\n      newPage = new SpreadSheetPageModel(\n        newPageName,\n        data.length,\n        data[0].length,\n        data\n      );\n    } else {\n      newPage = new SpreadSheetPageModel(newPageName);\n    }\n\n    this._spreadsheets.push(newPage);\n    this._currentPage = newPage;\n  }\n\n  // Tries to delete the given spreadsheet page.\n  public deletePage(spreadsheet: SpreadSheetPageModel): void {\n    // Find the index of the spreadsheet to delete\n    const index = this._spreadsheets.indexOf(spreadsheet);\n    const currentIndex = this._spreadsheets.indexOf(this._currentPage);\n\n    if (index !== -1) {\n      this._spreadsheets.splice(index, 1);\n    } else {\n      throw new Error(\"Spreadsheet not found\");\n    }\n\n    if (index === currentIndex) {\n      this._currentPage = this._spreadsheets[this._spreadsheets.length - 1];\n    }\n  }\n\n  // returns the current page that is being viewed in the Spreadsheet\n  public getCurrentPage(): SpreadSheetPageModel {\n    return this._currentPage;\n  }\n\n  // sets the current page to the given spreadsheet page\n  public setCurrentPage(newPage: SpreadSheetPageModel): void {\n    // Find the index of the spreadsheet to delete\n    const index = this._spreadsheets.indexOf(newPage);\n\n    if (index !== -1) {\n      // Change the current page to the given page if found\n      this._currentPage = this._spreadsheets[index];\n    } else {\n      throw new Error(\"Spreadsheet not found\");\n    }\n  }\n\n  // Exports the data in the current spreadsheet page to a CSV formatted string\n  public exportCurrentToCSV(filePath?: string, separator: string = \";\"): void {\n    if (filePath === undefined) {\n      filePath = \"export.csv\";\n    }\n    try {\n      const csvFromArrayOfArrays = convertArrayToCSV(\n        this._currentPage.getData(),\n        {\n          separator,\n        }\n      );\n\n      // Write the CSV data to a file\n      // fs.writeFileSync(filePath, csvFromArrayOfArrays);\n      const file = new File([\"meowmeow\"], filePath);\n      FileSaver.saveAs(file, filePath);\n\n      //   console.log(`File exported to: ${filePath}`);\n    } catch (error) {\n      console.error(\"Error exporting to CSV:\", error);\n    }\n  }\n\n  // imports a CSV from a filepath to a 2D array of data and adds it as a new page\n  public importCSV(filepath: string): void {\n    const csvFilePath = path.resolve(__dirname, filepath);\n\n    const fileContent =\n      fs.readFileSync(csvFilePath, { encoding: \"utf-8\" }) + \"\\n\";\n\n    const csv: string[][] = convertCSVToArray(fileContent, {\n      type: \"array\",\n      separator: \",\", // use the separator you use in your csv (e.g. '\\t', ',', ';' ...)\n    });\n\n    for (let r = 0; r < csv.length; r++) {\n      for (let c = 0; c < csv[0].length; c++) {\n        csv[r][c] = csv[r][c].toString();\n      }\n    }\n\n    this.addPage(csv);\n  }\n\n  // imports a CSV from a filepath to a 2D array of data and adds it as a new page\n  public importCSVFromFile(file: File): void {\n    const fileReader = new FileReader();\n    fileReader.readAsText(file);\n\n    fileReader.onload = () => {\n      const csv: string[][] = convertCSVToArray(fileReader.result, {\n        type: \"array\",\n        separator: \",\", // use the separator you use in your csv (e.g. '\\t', ',', ';' ...)\n      });\n\n      for (let r = 0; r < csv.length; r++) {\n        for (let c = 0; c < csv[0].length; c++) {\n          csv[r][c] = csv[r][c].toString();\n        }\n      }\n\n      this.addPage(csv);\n    };\n  }\n\n  public getNumPages(): number {\n    return this._spreadsheets.length;\n  }\n\n  public getAllPageNames(): string[] {\n    const pageNames: string[] = [];\n\n    for (let i = 0; i < this._spreadsheets.length; i++) {\n      pageNames.push(this._spreadsheets[i].getSheetName());\n    }\n\n    return pageNames;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}