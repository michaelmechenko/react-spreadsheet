{"ast":null,"code":"import { CellText } from \"./cell-text.model\";\nimport { create, all } from \"mathjs\";\n\n/**\n * \n */\nexport class SpreadsheetCellModel {\n  constructor() {\n    this._buffer = void 0;\n    this._display = void 0;\n    this.dependencies = void 0;\n    this.textVisual = void 0;\n    this._buffer = \"\";\n    this._display = \"\";\n    this.dependencies = new Set();\n    this.textVisual = new CellText.Builder().build();\n  }\n\n  /**\n   * Sets the buffer and display accordingly using the buffer and possible replacedBuffer inputs.\n   * buffer is the real buffer inputted by the user\n   * replacedBuffer is the buffer string with the replaced values which is needed to use mathjs\n   * Sets the buffer of this spreadsheet cell to be the new given buffer value\n   * If a replaceBuffer is given, it will evaluate the expression and set the\n   * display to be the result of that expression. Otherwise the display will\n   * match the buffer\n   * @param buffer : the string buffer that was entered by the user\n   * @param replacedBuffer : a possible buffer that has any cell reference expressions replaced \n   *                         with the actual value\n   */\n  setBuffer(buffer, replacedBuffer) {\n    this._buffer = buffer;\n    if (replacedBuffer !== undefined) {\n      try {\n        const math = create(all, {});\n        if (replacedBuffer.match(\"^[a-zA-Z][a-zA-Z0-9]*(\\\\+[a-zA-Z][a-zA-Z0-9]*)*$\")) {\n          let stringToConcatArr = replacedBuffer.split(\"+\");\n          this._display = stringToConcatArr.join(\"\");\n        } else {\n          const evaluatedBuffer = String(math.evaluate(replacedBuffer));\n          if (evaluatedBuffer === 'undefined' || evaluatedBuffer === ' Infinity') {\n            this._display = \"!ERR\";\n          } else {\n            this._display = evaluatedBuffer;\n          }\n        }\n      } catch (error) {\n        // console.warn(error);\n        this._display = \"!ERR\";\n      }\n    } else {\n      this._display = this._buffer;\n    }\n  }\n\n  // Returns the buffer value of this spreadsheet cell\n  getBuffer() {\n    return this._buffer;\n  }\n\n  // Returns the display value of this spreadsheet cell\n  getDisplay() {\n    return this._display;\n  }\n\n  // Return the dependencies of this spreadsheet cell\n  getDependencies() {\n    return Array.from(this.dependencies);\n  }\n\n  // Adds the given reference as a dependency to this spreadsheet cell\n  addDependency(r) {\n    this.dependencies.add(r);\n  }\n\n  // Removes the given reference from the dependencies of this spreadsheet cell\n  removeDependency(r) {\n    this.dependencies.delete(r);\n  }\n\n  // Shifts the dependencies of this cell up, left, down, or right depending on the inputs\n  shiftCellDependencies(down, right, rowIndex, colIndex) {\n    const newDependencies = new Set();\n    this.dependencies.forEach(dependency => {\n      const rowCol = this.getRowColFromReference(dependency);\n      if (!(rowCol[0] === rowIndex && down < 0 || rowCol[1] === colIndex && right < 0)) {\n        if (rowCol[0] >= rowIndex && down > 0 || rowCol[0] > rowIndex && down < 0) {\n          rowCol[0] = rowCol[0] + down;\n        } else if (rowCol[1] >= colIndex && right > 0 || rowCol[1] > colIndex && right < 0) {\n          rowCol[1] = rowCol[1] + right;\n        }\n        const newReference = this.getColumnName(rowCol[1]) + (rowCol[0] + 1);\n        newDependencies.add(newReference);\n      }\n    });\n    this.dependencies = newDependencies;\n  }\n\n  // Parses a string reference to get the correct cell from spreadsheet page\n  getRowColFromReference(cellReference) {\n    const col = cellReference.match(/[A-Z]+/i)[0];\n    const row = cellReference.match(/\\d+/)[0];\n    const colIndex = this.getColumnIndex(col);\n    const rowIndex = Number(row) - 1;\n    return [rowIndex, colIndex];\n  }\n\n  // Get the character code for the column based on the given index\n  // returns the column name (uppercase alphabetical) given the column index\n  // Gets the character code for a column given the index\n  getColumnName(columnNumber) {\n    let columnName = \"\";\n    while (columnNumber >= 0) {\n      columnName = String.fromCharCode(columnNumber % 26 + 65) + columnName;\n      columnNumber = Math.floor(columnNumber / 26) - 1;\n    }\n    return columnName;\n  }\n\n  // returns the column index given the column name (uppercase alphabetical)\n  getColumnIndex(column) {\n    let colIndex = -1;\n    for (let i = 0; i < column.length; i++) {\n      colIndex += (column[i].charCodeAt(0) - \"A\".charCodeAt(0) + 1) * Math.pow(26, column.length - i - 1);\n    }\n    return colIndex;\n  }\n\n  // Clears the buffer and display values for this spreadsheet cell\n  clearCell() {\n    this._buffer = \"\";\n    this._display = \"\";\n  }\n}","map":{"version":3,"names":["CellText","create","all","SpreadsheetCellModel","constructor","_buffer","_display","dependencies","textVisual","Set","Builder","build","setBuffer","buffer","replacedBuffer","undefined","math","match","stringToConcatArr","split","join","evaluatedBuffer","String","evaluate","error","getBuffer","getDisplay","getDependencies","Array","from","addDependency","r","add","removeDependency","delete","shiftCellDependencies","down","right","rowIndex","colIndex","newDependencies","forEach","dependency","rowCol","getRowColFromReference","newReference","getColumnName","cellReference","col","row","getColumnIndex","Number","columnNumber","columnName","fromCharCode","Math","floor","column","i","length","charCodeAt","pow","clearCell"],"sources":["C:/Users/micha/Documents/mechenko_main/PEDAGOGY/fa23/CS4530/project/team111-project/implementation/src/model/domain/cells/spreadsheet-cell.model.ts"],"sourcesContent":["import { ICell } from \"../../interfaces/cell.interface\";\nimport { CellText } from \"./cell-text.model\";\nimport { create, all } from \"mathjs\";\n\n/**\n * \n */\nexport class SpreadsheetCellModel implements ICell {\n  private _buffer: string;\n  private _display: string;\n  private dependencies: Set<string>;\n  private textVisual: CellText;\n\n  public constructor() {\n    this._buffer = \"\";\n    this._display = \"\";\n    this.dependencies = new Set<string>();\n    this.textVisual = new CellText.Builder().build();\n  }\n\n  /**\n   * Sets the buffer and display accordingly using the buffer and possible replacedBuffer inputs.\n   * buffer is the real buffer inputted by the user\n   * replacedBuffer is the buffer string with the replaced values which is needed to use mathjs\n   * Sets the buffer of this spreadsheet cell to be the new given buffer value\n   * If a replaceBuffer is given, it will evaluate the expression and set the\n   * display to be the result of that expression. Otherwise the display will\n   * match the buffer\n   * @param buffer : the string buffer that was entered by the user\n   * @param replacedBuffer : a possible buffer that has any cell reference expressions replaced \n   *                         with the actual value\n   */\n  public setBuffer(buffer: string, replacedBuffer?: string): void {\n    this._buffer = buffer;\n\n    if (replacedBuffer !== undefined) {\n      try {\n        const math = create(all, {});\n        if (\n          replacedBuffer.match(\n            \"^[a-zA-Z][a-zA-Z0-9]*(\\\\+[a-zA-Z][a-zA-Z0-9]*)*$\"\n          )\n        ) {\n          let stringToConcatArr: string[] = replacedBuffer.split(\"+\");\n          this._display = stringToConcatArr.join(\"\");\n        } else {\n            const evaluatedBuffer = String(math.evaluate(replacedBuffer));\n            if (evaluatedBuffer === 'undefined' || evaluatedBuffer ===' Infinity') {\n                this._display = \"!ERR\"\n            } else {\n                this._display = evaluatedBuffer;\n            }\n          \n        }\n      } catch (error) {\n        // console.warn(error);\n        this._display = \"!ERR\";\n      }\n    } else {\n      this._display = this._buffer;\n    }\n  }\n\n  // Returns the buffer value of this spreadsheet cell\n  public getBuffer(): string {\n    return this._buffer;\n  }\n\n  // Returns the display value of this spreadsheet cell\n  public getDisplay(): string {\n    return this._display;\n  }\n\n  // Return the dependencies of this spreadsheet cell\n  public getDependencies(): Array<string> {\n    return Array.from(this.dependencies);\n  }\n\n  // Adds the given reference as a dependency to this spreadsheet cell\n  public addDependency(r: string): void {\n    this.dependencies.add(r);\n  }\n\n  // Removes the given reference from the dependencies of this spreadsheet cell\n  public removeDependency(r: string): void {\n    this.dependencies.delete(r);\n  }\n\n  // Shifts the dependencies of this cell up, left, down, or right depending on the inputs\n  public shiftCellDependencies(\n    down: number,\n    right: number,\n    rowIndex: number,\n    colIndex: number\n  ) {\n    const newDependencies = new Set<string>();\n\n    this.dependencies.forEach((dependency) => {\n      const rowCol = this.getRowColFromReference(dependency);\n\n      if (\n        !(\n          (rowCol[0] === rowIndex && down < 0) ||\n          (rowCol[1] === colIndex && right < 0)\n        )\n      ) {\n        if (\n          (rowCol[0] >= rowIndex && down > 0) ||\n          (rowCol[0] > rowIndex && down < 0)\n        ) {\n          rowCol[0] = rowCol[0] + down;\n        } else if (\n          (rowCol[1] >= colIndex && right > 0) ||\n          (rowCol[1] > colIndex && right < 0)\n        ) {\n          rowCol[1] = rowCol[1] + right;\n        }\n\n        const newReference = this.getColumnName(rowCol[1]) + (rowCol[0] + 1);\n\n        newDependencies.add(newReference);\n      }\n    });\n\n    this.dependencies = newDependencies;\n  }\n\n  // Parses a string reference to get the correct cell from spreadsheet page\n  private getRowColFromReference(cellReference: string): Array<number> {\n    const col = cellReference.match(/[A-Z]+/i)![0];\n    const row = cellReference.match(/\\d+/)![0];\n    const colIndex = this.getColumnIndex(col)\n    const rowIndex = Number(row) - 1;\n\n    return [rowIndex, colIndex];\n  }\n\n  // Get the character code for the column based on the given index\n  // returns the column name (uppercase alphabetical) given the column index\n  // Gets the character code for a column given the index\n  private getColumnName(columnNumber: number): string {\n    let columnName = \"\";\n    while (columnNumber >= 0) {\n      columnName = String.fromCharCode((columnNumber % 26) + 65) + columnName;\n      columnNumber = Math.floor(columnNumber / 26) - 1;\n    }\n    return columnName;\n  }\n\n  // returns the column index given the column name (uppercase alphabetical)\n  private getColumnIndex(column: string): number {\n    let colIndex = -1;\n    for (let i = 0; i < column.length; i++) {\n      colIndex +=\n        (column[i].charCodeAt(0) - \"A\".charCodeAt(0) + 1) *\n        Math.pow(26, column.length - i - 1);\n    }\n    return colIndex;\n  }\n\n  // Clears the buffer and display values for this spreadsheet cell\n  public clearCell(): void {\n    this._buffer = \"\";\n    this._display = \"\";\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}